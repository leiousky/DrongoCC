import { Component, Vec2 } from "cc";
import { Controller } from "./Controller";
import { GComponent } from "./GComponent";
import { GObject } from "./GObject";
import { GScrollBar } from "./GScrollBar";
import { ByteBuffer } from "./utils/ByteBuffer";
export declare class ScrollPane extends Component {
    private _owner;
    private _container;
    private _maskContainer;
    private _scrollType;
    private _scrollStep;
    private _mouseWheelStep;
    private _decelerationRate;
    private _scrollBarMargin;
    private _bouncebackEffect;
    private _touchEffect;
    private _scrollBarDisplayAuto?;
    private _vScrollNone;
    private _hScrollNone;
    private _needRefresh;
    private _refreshBarAxis;
    private _displayOnLeft?;
    private _snapToItem?;
    private _snappingPolicy?;
    _displayInDemand?: boolean;
    private _mouseWheelEnabled;
    private _pageMode?;
    private _inertiaDisabled?;
    private _floating?;
    private _dontClipMargin?;
    private _xPos;
    private _yPos;
    private _viewSize;
    private _contentSize;
    private _overlapSize;
    private _pageSize;
    private _containerPos;
    private _beginTouchPos;
    private _lastTouchPos;
    private _lastTouchGlobalPos;
    private _velocity;
    private _velocityScale;
    private _lastMoveTime;
    private _isHoldAreaDone;
    private _aniFlag;
    _loop: number;
    private _headerLockedSize;
    private _footerLockedSize;
    private _refreshEventDispatching;
    private _dragged;
    private _hover;
    private _tweening;
    private _tweenTime;
    private _tweenDuration;
    private _tweenStart;
    private _tweenChange;
    private _pageController?;
    private _hzScrollBar?;
    private _vtScrollBar?;
    private _header?;
    private _footer?;
    static draggingPane: ScrollPane;
    setup(buffer: ByteBuffer): void;
    protected onDestroy(): void;
    hitTest(pt: Vec2, globalPt: Vec2): GObject;
    get owner(): GComponent;
    get hzScrollBar(): GScrollBar;
    get vtScrollBar(): GScrollBar;
    get header(): GComponent;
    get footer(): GComponent;
    get bouncebackEffect(): boolean;
    set bouncebackEffect(sc: boolean);
    get touchEffect(): boolean;
    set touchEffect(sc: boolean);
    set scrollStep(val: number);
    get decelerationRate(): number;
    set decelerationRate(val: number);
    get scrollStep(): number;
    get snapToItem(): boolean;
    set snapToItem(value: boolean);
    get snappingPolicy(): number;
    set snappingPolicy(value: number);
    get mouseWheelEnabled(): boolean;
    set mouseWheelEnabled(value: boolean);
    get isDragged(): boolean;
    get percX(): number;
    set percX(value: number);
    setPercX(value: number, ani?: boolean): void;
    get percY(): number;
    set percY(value: number);
    setPercY(value: number, ani?: boolean): void;
    get posX(): number;
    set posX(value: number);
    setPosX(value: number, ani?: boolean): void;
    get posY(): number;
    set posY(value: number);
    setPosY(value: number, ani?: boolean): void;
    get contentWidth(): number;
    get contentHeight(): number;
    get viewWidth(): number;
    set viewWidth(value: number);
    get viewHeight(): number;
    set viewHeight(value: number);
    get currentPageX(): number;
    set currentPageX(value: number);
    get currentPageY(): number;
    set currentPageY(value: number);
    setCurrentPageX(value: number, ani?: boolean): void;
    setCurrentPageY(value: number, ani?: boolean): void;
    get isBottomMost(): boolean;
    get isRightMost(): boolean;
    get pageController(): Controller;
    set pageController(value: Controller);
    get scrollingPosX(): number;
    get scrollingPosY(): number;
    scrollTop(ani?: boolean): void;
    scrollBottom(ani?: boolean): void;
    scrollUp(ratio?: number, ani?: boolean): void;
    scrollDown(ratio?: number, ani?: boolean): void;
    scrollLeft(ratio?: number, ani?: boolean): void;
    scrollRight(ratio?: number, ani?: boolean): void;
    scrollToView(target: any, ani?: boolean, setFirst?: boolean): void;
    isChildInView(obj: GObject): boolean;
    cancelDragging(): void;
    lockHeader(size: number): void;
    lockFooter(size: number): void;
    onOwnerSizeChanged(): void;
    handleControllerChanged(c: Controller): void;
    private updatePageController;
    adjustMaskContainer(): void;
    setSize(aWidth: number, aHeight: number): void;
    setContentSize(aWidth: number, aHeight: number): void;
    changeContentSizeOnScrolling(deltaWidth: number, deltaHeight: number, deltaPosX: number, deltaPosY: number): void;
    private handleSizeChanged;
    private posChanged;
    private refresh;
    private refresh2;
    private onTouchBegin;
    private onTouchMove;
    private onTouchEnd;
    private onRollOver;
    private onRollOut;
    private onMouseWheel;
    private updateScrollBarPos;
    updateScrollBarVisible(): void;
    private updateScrollBarVisible2;
    private __barTweenComplete;
    private getLoopPartSize;
    private loopCheckingCurrent;
    private loopCheckingTarget;
    private loopCheckingTarget2;
    private loopCheckingNewPos;
    private alignPosition;
    private alignByPage;
    private updateTargetAndDuration;
    private updateTargetAndDuration2;
    private fixDuration;
    private startTween;
    private killTween;
    private checkRefreshBar;
    protected update(dt: number): boolean;
    private runTween;
}
