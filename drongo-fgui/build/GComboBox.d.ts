import { Color } from "cc";
import { Controller } from "./Controller";
import { PopupDirection } from "./FieldTypes";
import { GComponent } from "./GComponent";
import { GList } from "./GList";
import { GObject } from "./GObject";
import { GTextField } from "./GTextField";
import { ByteBuffer } from "./utils/ByteBuffer";
export declare class GComboBox extends GComponent {
    dropdown: GComponent;
    protected _titleObject: GObject;
    protected _iconObject: GObject;
    protected _list: GList;
    private _items;
    private _values;
    private _icons?;
    private _visibleItemCount;
    private _itemsUpdated;
    private _selectedIndex;
    private _buttonController;
    private _popupDirection;
    private _selectionController;
    private _over;
    private _down;
    constructor();
    get text(): string | null;
    set text(value: string | null);
    get icon(): string | null;
    set icon(value: string | null);
    get titleColor(): Color;
    set titleColor(value: Color);
    get titleFontSize(): number;
    set titleFontSize(value: number);
    get visibleItemCount(): number;
    set visibleItemCount(value: number);
    get popupDirection(): PopupDirection;
    set popupDirection(value: PopupDirection);
    get items(): Array<string>;
    set items(value: Array<string>);
    get icons(): Array<string>;
    set icons(value: Array<string>);
    get values(): Array<string>;
    set values(value: Array<string>);
    get selectedIndex(): number;
    set selectedIndex(val: number);
    get value(): string | null;
    set value(val: string | null);
    get selectionController(): Controller;
    set selectionController(value: Controller);
    getTextField(): GTextField;
    protected setState(val: string): void;
    getProp(index: number): any;
    setProp(index: number, value: any): void;
    protected constructExtension(buffer: ByteBuffer): void;
    handleControllerChanged(c: Controller): void;
    private updateSelectionController;
    dispose(): void;
    setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    protected showDropdown(): void;
    private onPopupClosed;
    private onClickItem;
    private onClickItem2;
    private onRollOver_1;
    private onRollOut_1;
    private onTouchBegin_1;
    private onTouchEnd_1;
}
