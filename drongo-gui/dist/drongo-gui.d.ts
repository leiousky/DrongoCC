// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../cc
//   ../drongo-cc
//   ../drongo-fgui

declare module 'drongo-gui' {
    export { fguiResLoader } from "drongo-gui/res/FGUILoader";
    export { FGUIResource } from "drongo-gui/res/FGUIResource";
    export { Layer } from "drongo-gui/layer/Layer";
    export { GUISettings } from "drongo-gui/gui/GUISettings";
    export { IGUIInfo } from "drongo-gui/gui/IGUIInfo";
    export { BaseMediator } from "drongo-gui/gui/BaseMediator";
    export { GUIProxy } from "drongo-gui/gui/GUIProxy";
    export { GUIMediator } from "drongo-gui/gui/GUIMediator";
    export { SubGUIMediator } from "drongo-gui/gui/SubGUIMediator";
    export { Drongo } from "drongo-gui/Drongo";
}

declare module 'drongo-gui/res/FGUILoader' {
    import { AssetManager } from "cc";
    import { ResRef, ResURL } from "drongo-cc";
    /**
      * FGUI资源加载器
      * @param url
      * @param bundle
      * @param refKey
      * @param progress
      * @param cb
      */
    export function fguiResLoader(url: ResURL, bundle: AssetManager.Bundle, refKey: string, progress?: (progress: number) => void, cb?: (err: Error, resRef: ResRef) => void): void;
}

declare module 'drongo-gui/res/FGUIResource' {
    import { Resource } from "drongo-cc";
    export class FGUIResource extends Resource {
        constructor();
        /**
          * 销毁
          */
        destroy(): void;
    }
}

declare module 'drongo-gui/layer/Layer' {
    import { ILayer } from "drongo-cc";
    import { GComponent } from "drongo-fgui";
    export class Layer extends GComponent implements ILayer {
        isFullScrene: boolean;
        openRecord: Array<string>;
        constructor(name: string, isFullScrene?: boolean);
        getCount(): number;
    }
}

declare module 'drongo-gui/gui/GUISettings' {
    import { Color } from "cc";
    /**
      * gui界面通用配置
      */
    export class GUISettings {
        /**UI遮罩颜色值 */
        static mask_color: Color;
    }
}

declare module 'drongo-gui/gui/IGUIInfo' {
    import { GUIState } from "drongo-cc";
    export interface IGUIInfo {
            /**
                * UI 全局唯一KEY
                */
            key: string;
            /**
                * 是否永久存在
                */
            permanence: boolean;
            /**
                * UI所在层
                */
            layer: string;
            /**
                * 是否使用遮罩
                */
            modal: boolean;
            /**
                * 点击蒙版时时候关闭界面
                */
            modalClose: boolean;
            /**
                * AssetBundle 包名
                */
            bundleName: string;
            /**
                * UIPackage名称
                */
            packageName: string;
            /**
                * FGUI 组件名
                */
            comName: string;
            /**UI所属状态 */
            state: GUIState;
    }
}

declare module 'drongo-gui/gui/BaseMediator' {
    import { Handler } from "drongo-cc";
    import { GComponent } from "drongo-fgui";
    /**
        * 基础UIMediator类
        */
    export class BaseMediator {
            /**UI组件 */
            ui: GComponent | null;
            /**初始化完毕*/
            inited: boolean;
            /**外部传参*/
            data: any;
            constructor();
            init(): void;
            tick(dt: number): void;
            show(data: any): void;
            showedUpdate(data?: any): void;
            hide(): void;
            destroy(): void;
            /**
                * 根据名称或路径获取组件
                * @param path
                * @returns
                */
            getUIComponent(path: string): any;
            /**
                * 属性和属性的绑定
                */
            bindAA(source: any, property: string, target: any, tProperty: string): void;
            /**
                * 取消属性和属性的绑定
                * @param source
                * @param property
                * @param target
                * @param tProperty
                */
            unbindAA(source: any, property: string, target: any, tProperty: string): void;
            /**
                * 属性和函数的绑定
                * @param source
                * @param property
                * @param callBack
                * @param caller
                */
            bindAM(source: any, property: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 取消属性和函数的绑定
                * @param source
                * @param propertys
                * @param callBack
                * @param caller
                */
            unbidAM(source: any, propertys: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 函数和函数的绑定
                * @param source
                * @param functionName  目标函数
                * @param preHandle     该函数将在目标函数调用前调用
                * @param laterHandler  该函数将在目标函数调用后调用
                */
            bindMM(source: any, functionName: string, preHandle: Handler, laterHandler?: Handler): void;
            /**
                * 取消方法和方法的绑定关系
                * @param source
                * @param functionName
                * @param preHandle
                * @param laterHandler
                */
            unbindMM(source: any, functionName: string, preHandle: Handler, laterHandler: Handler): void;
            /**
                * 绑定事件
                * @param target
                * @param type
                * @param handler
                * @param caller
                */
            bindEvent(target: any, type: string, handler: Function, caller: any): void;
            /**
                * 取消事件绑定
                * @param target
                * @param type
                * @param handler
                * @param caller
                */
            unbindEvent(target: any, type: string, handler: Function, caller: any): void;
            /**
                * 按照绑定记录添加事件
                */
            _addBindedEvents(): void;
            /**
                * 删除已绑定事件
                */
            _removeBindedEvents(): void;
    }
}

declare module 'drongo-gui/gui/GUIProxy' {
    import { IGUIMediator } from "drongo-cc";
    import { IGUIInfo } from "drongo-gui/gui/IGUIInfo";
    /**
        * GUI代理，将资源加载和Mediator逻辑隔离开
        */
    export class GUIProxy {
            info?: IGUIInfo;
            /**GUI中介*/
            mediator?: IGUIMediator;
            /**关闭时间*/
            closeTime: number;
            /**UI层次*/
            zIndex: number;
            /**数据 */
            data: any;
            constructor(info: IGUIInfo);
            tick(dt: number): void;
            show(data?: any): void;
            showedUpdate(data: any): void;
            hide(): void;
            destroy(): void;
            /**
                * 获取组件
                * @param path
                */
            getComponent(path: string): any;
    }
}

declare module 'drongo-gui/gui/GUIMediator' {
    import { IGUIMediator } from "drongo-cc";
    import { GComponent } from "drongo-fgui";
    import { BaseMediator } from "drongo-gui/gui/BaseMediator";
    import { IGUIInfo } from "drongo-gui/gui/IGUIInfo";
    import { SubGUIMediator } from "drongo-gui/gui/SubGUIMediator";
    /**
        * UI中介者
        */
    export class GUIMediator extends BaseMediator implements IGUIMediator {
            info: IGUIInfo | null;
            /**依赖的服务 */
            services: Array<string>;
            /**根节点 */
            viewComponent: GComponent | null;
            /**子Mediator(用于代码拆分)*/
            protected $subMediators: Array<SubGUIMediator>;
            constructor();
            /**
                * 创建UI
                * @param info
                * @param created
                */
            createUI(info: any, created: Function): void;
            protected _maskClickHandler(): void;
            init(): void;
            show(data?: any): void;
            showedUpdate(data?: any): void;
            hide(): void;
            /**
                * 关闭
                * @param checkLayer 是否检查全屏层记录
                */
            close(checkLayer?: boolean): void;
            tick(dt: number): void;
            destroy(): void;
    }
}

declare module 'drongo-gui/gui/SubGUIMediator' {
    import { GComponent } from "drongo-fgui";
    import { BaseMediator } from "drongo-gui/gui/BaseMediator";
    import { GUIMediator } from "drongo-gui/gui/GUIMediator";
    /**
      * 子UI 逻辑划分
      */
    export class SubGUIMediator extends BaseMediator {
        /**所属GUI*/
        owner: GUIMediator;
        constructor(ui: GComponent, owner: GUIMediator);
        destroy(): void;
    }
}

declare module 'drongo-gui/Drongo' {
    import { ResURL } from "drongo-cc";
    export class Drongo {
        /**
          * 初始化
          * @param guiconfig
          * @param layers
          * @param fullScrene
          */
        static init(guiconfig: ResURL, layers: Array<string>, fullScrene: Array<string>, callback: () => void): void;
    }
}

