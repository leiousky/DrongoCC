// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../cc

declare module 'drongo-cc' {
    export { Injector } from "drongo-cc/utils/Injector";
    export { Debuger } from "drongo-cc/utils/Debuger";
    export { Pool } from "drongo-cc/utils/Pool";
    export { BitFlag } from "drongo-cc/utils/BitFlag";
    export { LocalStorage } from "drongo-cc/utils/LocalStorage";
    export { StringUtils } from "drongo-cc/utils/StringUtils";
    export { MaxRectBinPack, FindPosition, Rect } from "drongo-cc/utils/MaxRectsBinPack";
    export { RGBA8888Texture } from "drongo-cc/utils/RGBA8888Texture";
    export { Handler } from "drongo-cc/utils/Handler";
    export { ByteArray } from "drongo-cc/utils/ByteArray";
    export { IEventDispatcher } from "drongo-cc/events/IEventDispatcher";
    export { Event } from "drongo-cc/events/Event";
    export { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    export { List } from "drongo-cc/containers/List";
    export { Dictionary } from "drongo-cc/containers/Dictionary";
    export { BindingUtils } from "drongo-cc/bindings/BindingUtils";
    export { BinderUtils } from "drongo-cc/bindings/BinderUtils";
    export { FunctionHook } from "drongo-cc/bindings/FunctionHook";
    export { PropertyBinder } from "drongo-cc/bindings/PropertyBinder";
    export { ITicker } from "drongo-cc/ticker/ITicker";
    export { ITickerManager } from "drongo-cc/ticker/ITickerManager";
    export { TickerManager } from "drongo-cc/ticker/TickerManager";
    export { ITimer } from "drongo-cc/timer/ITimer";
    export { Timer } from "drongo-cc/timer/Timer";
    export { IAudioChannel } from "drongo-cc/audios/IAudioChannel";
    export { IAudioGroup } from "drongo-cc/audios/IAudioGroup";
    export { IAudioManager } from "drongo-cc/audios/IAudioManager";
    export { AudioChannel } from "drongo-cc/audios/AudioChannel";
    export { AudioManager } from "drongo-cc/audios/AudioManager";
    export { IResource } from "drongo-cc/res/IResource";
    export { IResManager } from "drongo-cc/res/IResManager";
    export { ResManager } from "drongo-cc/res/ResManager";
    export { Resource } from "drongo-cc/res/Resource";
    export { Res } from "drongo-cc/res/Res";
    export { ResRef } from "drongo-cc/res/ResRef";
    export { ResURL, url2Key, key2URL, fullURL } from "drongo-cc/res/ResURL";
    export { ITask } from "drongo-cc/task/ITask";
    export { TaskQueue } from "drongo-cc/task/TaskQueue";
    export { TaskSequence } from "drongo-cc/task/TaskSequence";
    export { IMatcher } from "drongo-cc/entitys/matchers/IMatcher";
    export { Matcher } from "drongo-cc/entitys/matchers/Matcher";
    export { MatcherAllOf } from "drongo-cc/entitys/matchers/MatcherAllOf";
    export { MatcherAnyOf } from "drongo-cc/entitys/matchers/MatcherAnyOf";
    export { MatcherNoneOf } from "drongo-cc/entitys/matchers/MatcherNoneOf";
    export { Component } from "drongo-cc/entitys/Component";
    export { Entity } from "drongo-cc/entitys/Entity";
    export { Group } from "drongo-cc/entitys/Group";
    export { System } from "drongo-cc/entitys/System";
    export { World } from "drongo-cc/entitys/World";
    export { IState } from "drongo-cc/fsm/IState";
    export { FSM } from "drongo-cc/fsm/FSM";
    export { ILayer } from "drongo-cc/gui/layer/ILayer";
    export { ILayerManager } from "drongo-cc/gui/layer/ILayerManager";
    export { LayerManager } from "drongo-cc/gui/layer/LayerManager";
    export { GUIState } from "drongo-cc/gui/core/GUIState";
    export { IGUIMediator } from "drongo-cc/gui/core/IGUIMediator";
    export { IGUIManager } from "drongo-cc/gui/core/IGUIManager";
    export { IViewComponent } from "drongo-cc/gui/core/IViewComponent";
    export { IViewCreator } from "drongo-cc/gui/core/IViewCreator";
    export { GUIManager } from "drongo-cc/gui/GUIManager";
    export { IRelationList } from "drongo-cc/gui/relations/IRelationList";
    export { IRelationInfo } from "drongo-cc/gui/relations/IRelationInfo";
    export { RelationManager } from "drongo-cc/gui/relations/RelationManager";
    export { ILoadingData } from "drongo-cc/gui/loadingView/ILoadingData";
    export { ILoadingView } from "drongo-cc/gui/loadingView/ILoadingView";
    export { LoadingView } from "drongo-cc/gui/loadingView/LoadingView";
    export { IService } from "drongo-cc/services/IService";
    export { BaseService } from "drongo-cc/services/BaseService";
    export { ServiceStarter } from "drongo-cc/services/ServiceStarter";
    export { ServiceManager, serviceManager } from "drongo-cc/services/ServiceManager";
    export { IConfigAccessor } from "drongo-cc/configs/core/IConfigAccessor";
    export { IConfigManager } from "drongo-cc/configs/core/IConfigManager";
    export { BaseConfigAccessor } from "drongo-cc/configs/BaseConfigAccessor";
    export { ConfigManager } from "drongo-cc/configs/ConfigManager";
}

declare module 'drongo-cc/utils/Injector' {
    /**
        * 注入器
        */
    export class Injector {
            /**
                * 注入
                * @param key
                * @param clazz   类型或实例
                */
            static inject(customKey: string, clazz: any): void;
            /**
                * 获取已注入的类型实例
                */
            static getInject(customKey: string): any | null;
    }
}

declare module 'drongo-cc/utils/Debuger' {
    export class Debuger {
            /**
                * 最大保存条数
                */
            static MaxCount: number;
            /**
                * 设置过滤
                * @param key
                * @param isOpen
                */
            static debug(key: string, isOpen: boolean): void;
            /**
                * 获取已保存的日志
                * @param type
                * @returns
                */
            static getLogs(type?: string): Array<string>;
            static log(type: string, msg: any): void;
            static err(type: string, msg: any): void;
            static warn(type: string, msg: any): void;
            static info(type: string, msg: any): void;
    }
}

declare module 'drongo-cc/utils/Pool' {
    /**
        * 可重复利用对象接口
        */
    export interface IRecyclable {
            /**
                * 重置到可复用状态
                */
            reset(): void;
            /**
                * 销毁
                */
            destroy(): void;
    }
    /**
        * 对象池
        */
    export class Pool<T extends IRecyclable> {
            constructor(clazz: {
                    new (): T;
            }, maxCount?: number);
            /**
             * 在池中的对象
             */
            get count(): number;
            /**
                * 使用中的数量
                */
            get usingCount(): number;
            /**
                * 分配
                * @returns
                */
            allocate(): T;
            /**
                * 回收到池中
                * @param value
                * @returns
                */
            recycle(value: T): void;
            /**
                * 批量回收
                * @param list
                */
            recycleList(list: Array<T>): void;
            /**
                * 将所有使用中的对象都回收到池中
                */
            recycleAll(): void;
            destroy(): void;
    }
}

declare module 'drongo-cc/utils/BitFlag' {
    /**
        * bit位操作
        */
    export class BitFlag {
            constructor();
            add(flag: number): void;
            remove(flag: number): void;
            /**
                * 是否包含
                * @param flag
                * @returns
                */
            has(flag: number): boolean;
            /**
                * 位码
                */
            get flags(): number;
            get elements(): Array<number>;
            destroy(): void;
    }
}

declare module 'drongo-cc/utils/LocalStorage' {
    /**
        * 本地数据缓存
        */
    export class LocalStorage {
            /**
                * 初始化
                * @param gameName
                */
            static init(gameName: string): void;
            /**
                * 获取指定数据
                * @param key
                * @returns
                */
            static getItem(key: string): any;
            /**
                * 设置指定数据
                * @param key
                * @param value
                */
            static setItem(key: string, value: any): void;
            /**
                * 清理
                * @param key
                */
            static clearItem(key: string): void;
            /**
                * 清理所有
                */
            static clearAll(): void;
            /**
                * 保存
                */
            static save(): void;
    }
}

declare module 'drongo-cc/utils/StringUtils' {
    export class StringUtils {
            /**
                * 是否为空
                * @param str
                */
            static isEmpty(str: string): boolean;
            /**
                * 参数替换
                *  @param  str
                *  @param  rest
                *
                *  @example
                *
                *  var str:string = "here is some info '{0}' and {1}";
                *  trace(StringUtil.substitute(str, 15.4, true));
                *
                *  // this will output the following string:
                *  // "here is some info '15.4' and true"
                */
            static substitute(str: string, ...rest: any[]): string;
            /**
             * 替换全部字符串
             * @param string src 源串
             * @param string from_ch 被替换的字符
             * @param string to_ch 替换的字符
             *
             * @return string 结果字符串
             */
            static replaceAll(src: string, from_ch: string, to_ch: string): string;
            /**
                * 拆分字符串
                * @param str
                */
            static splitString(str: string, split0: string, split1: string): string[][];
            /**
                * 获取文件后缀名
                * @param url
                */
            static getFileSuffix(url: string): string;
            /**
                * 替换后缀
                * @param url
                * @param suff      后缀
                * @returns
                */
            static replaceSuffix(url: string, suff: string): string;
    }
}

declare module 'drongo-cc/utils/MaxRectsBinPack' {
    export enum FindPosition {
            ShortSideFit = 0,
            BottomLeft = 1,
            ContactPoint = 2,
            LongSideFit = 3,
            AreaFit = 4
    }
    export class MaxRectBinPack {
            /**
                * 构建方程
                * @param width {number} 画板宽度
                * @param height {number} 画板高度
                * @param allowRotate {boolean} 允许旋转
                */
            constructor(width: number, height: number, allowRotate?: boolean);
            /**
                * 在线算法入口 插入矩形方法
                * @param width {number}
                * @param height {number}
                * @param method {FindPosition}
                */
            insert(width: number, height: number, method: FindPosition): Rect;
            /**
                * 占有率
                * @returns
                */
            get occupancy(): number;
            /**
                * 擦除节点
                * @param rect
                */
            eraseNoce(rect: Rect): void;
    }
    export class Rect {
            /**
                * 起点 x 坐标
                */
            x: number;
            /**
                * 起点 y 坐标
                */
            y: number;
            /**
                * 宽度
                */
            width: number;
            /**
                * 高度
                */
            height: number;
            /**
                * 当前是否被旋转了
                */
            isRotated: boolean;
            /**
                * 自定义信息
                */
            info: any;
            /**
                * 克隆
                */
            clone(): Rect;
            /**
                * 矩形是否在另一个矩形内部
                * @param otherRect {Rect}
                */
            isIn(otherRect: Rect): boolean;
            get isEmpty(): boolean;
    }
}

declare module 'drongo-cc/utils/RGBA8888Texture' {
    import { gfx, Texture2D } from "cc";
    /**
        * RGBA8888二进制纹理
        */
    export class RGBA8888Texture extends Texture2D {
            constructor(width: number, height: number);
            /**
                * 填充颜色
                * @param x
                * @param y
                * @param width
                * @param height
                * @param color
                */
            fillRect(x: number, y: number, width: number, height: number, color: number): void;
            /**
                * 通过颜色分量设置
                * @param r
                * @param g
                * @param b
                * @param a
                * @param x
                * @param y
                */
            setPixel(r: number, g: number, b: number, a: number, x: number, y: number): void;
            /**
                * 通过单个颜色值设置
                * @param color
                * @param x
                * @param y
                */
            setPixelColor(color: number, x: number, y: number): void;
            /**
                * 将纹理绘制到纹理
                * @param texture
                * @param sx
                * @param sy
                * @param width
                * @param height
                * @param tx
                * @param ty
                * @param filter
                * @returns
                */
            draw2Texture(texture: Texture2D, sx: number, sy: number, width: number, height: number, tx: number, ty: number, filter?: gfx.Filter): void;
            /**
                * 将二进制数据填充到纹理的指定区域
                * @param buffer
                * @param x
                * @param y
                * @param width
                * @param height
                * @returns
             */
            copyBuffersToTexture(buffer: ArrayBufferView, x: number, y: number, width: number, height: number): void;
    }
}

declare module 'drongo-cc/utils/Handler' {
    /**
      * 处理器
      */
    export class Handler {
        method: Function;
        caller: any;
        once: boolean;
        run(...args: any[]): void;
        equal(value: Handler): boolean;
        static create(caller: any, method: Function | null, once?: boolean): Handler;
    }
}

declare module 'drongo-cc/utils/ByteArray' {
    /**
        * Endian 类中包含一些值，它们表示用于表示多字节数字的字节顺序。
        * 字节顺序为 bigEndian（最高有效字节位于最前）或 littleEndian（最低有效字节位于最前）。
        * @version Egret 2.4
        * @platform Web,Native
        * @language zh_CN
        */
    export class Endian {
            /**
                * 表示多字节数字的最低有效字节位于字节序列的最前面。
                * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            static LITTLE_ENDIAN: string;
            /**
                * 表示多字节数字的最高有效字节位于字节序列的最前面。
                * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            static BIG_ENDIAN: string;
    }
    export const enum EndianConst {
            LITTLE_ENDIAN = 0,
            BIG_ENDIAN = 1
    }
    /**
        * ByteArray 类提供用于优化读取、写入以及处理二进制数据的方法和属性。
        * 注意：ByteArray 类适用于需要在字节层访问数据的高级开发人员。
        * @version Egret 2.4
        * @platform Web,Native
        * @includeExample egret/utils/ByteArray.ts
        * @language zh_CN
        */
    export class ByteArray {
            /**
                * @private
                */
            protected bufferExtSize: number;
            protected data: DataView;
            protected _bytes: Uint8Array;
            /**
                * @private
                */
            protected _position: number;
            /**
                *
                * 已经使用的字节偏移量
                * @protected
                * @type {number}
                * @memberOf ByteArray
                */
            protected write_position: number;
            /**
                * 更改或读取数据的字节顺序；egret.EndianConst.BIG_ENDIAN 或 egret.EndianConst.LITTLE_ENDIAN。
                * @default egret.EndianConst.BIG_ENDIAN
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get endian(): string;
            set endian(value: string);
            protected $endian: EndianConst;
            /**
                * @version Egret 2.4
                * @platform Web,Native
                */
            constructor(buffer?: ArrayBuffer | Uint8Array, bufferExtSize?: number);
            reset(): void;
            destroy(): void;
            /**
                * @deprecated
                * @version Egret 2.4
                * @platform Web,Native
                */
            setArrayBuffer(buffer: ArrayBuffer): void;
            /**
                * 可读的剩余字节数
                *
                * @returns
                *
                * @memberOf ByteArray
                */
            get readAvailable(): number;
            get buffer(): ArrayBuffer;
            get rawBuffer(): ArrayBuffer;
            /**
                * @private
                */
            set buffer(value: ArrayBuffer);
            get bytes(): Uint8Array;
            /**
                * @private
                * @version Egret 2.4
                * @platform Web,Native
                */
            get dataView(): DataView;
            /**
                * @private
                */
            set dataView(value: DataView);
            /**
                * @private
                */
            get bufferOffset(): number;
            /**
                * 将文件指针的当前位置（以字节为单位）移动或返回到 ByteArray 对象中。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get position(): number;
            set position(value: number);
            /**
                * ByteArray 对象的长度（以字节为单位）。
                * 如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧。
                * 如果将长度设置为小于当前长度的值，将会截断该字节数组。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get length(): number;
            set length(value: number);
            protected _validateBuffer(value: number): void;
            /**
                * 可从字节数组的当前位置到数组末尾读取的数据的字节数。
                * 每次访问 ByteArray 对象时，将 bytesAvailable 属性与读取方法结合使用，以确保读取有效的数据。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get bytesAvailable(): number;
            /**
                * 清除字节数组的内容，并将 length 和 position 属性重置为 0。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            clear(): void;
            /**
                * 从字节流中读取布尔值。读取单个字节，如果字节非零，则返回 true，否则返回 false
                * @return 如果字节不为零，则返回 true，否则返回 false
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readBoolean(): boolean;
            /**
                * 从字节流中读取带符号的字节
                * @return 介于 -128 和 127 之间的整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readByte(): number;
            /**
                * 从字节流中读取 length 参数指定的数据字节数。从 offset 指定的位置开始，将字节读入 bytes 参数指定的 ByteArray 对象中，并将字节写入目标 ByteArray 中
                * @param bytes 要将数据读入的 ByteArray 对象
                * @param offset bytes 中的偏移（位置），应从该位置写入读取的数据
                * @param length 要读取的字节数。默认值 0 导致读取所有可用的数据
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readBytes(bytes: ByteArray, offset?: number, length?: number): void;
            /**
                * 从字节流中读取一个 IEEE 754 双精度（64 位）浮点数
                * @return 双精度（64 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readDouble(): number;
            /**
                * 从字节流中读取一个 IEEE 754 单精度（32 位）浮点数
                * @return 单精度（32 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readFloat(): number;
            /**
                * 从字节流中读取一个带符号的 32 位整数
                * @return 介于 -2147483648 和 2147483647 之间的 32 位带符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readInt(): number;
            /**
                * 从字节流中读取一个带符号的 16 位整数
                * @return 介于 -32768 和 32767 之间的 16 位带符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readShort(): number;
            /**
                * 从字节流中读取无符号的字节
                * @return 介于 0 和 255 之间的无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readUnsignedByte(): number;
            /**
                * 从字节流中读取一个无符号的 32 位整数
                * @return 介于 0 和 4294967295 之间的 32 位无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readUnsignedInt(): number;
            /**
                * 从字节流中读取一个无符号的 16 位整数
                * @return 介于 0 和 65535 之间的 16 位无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readUnsignedShort(): number;
            /**
                * 从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是无符号的短整型（以字节表示长度）
                * @return UTF-8 编码的字符串
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readUTF(): string;
            /**
                * 从字节流中读取一个由 length 参数指定的 UTF-8 字节序列，并返回一个字符串
                * @param length 指明 UTF-8 字节长度的无符号短整型数
                * @return 由指定长度的 UTF-8 字节组成的字符串
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            readUTFBytes(length: number): string;
            /**
                * 写入布尔值。根据 value 参数写入单个字节。如果为 true，则写入 1，如果为 false，则写入 0
                * @param value 确定写入哪个字节的布尔值。如果该参数为 true，则该方法写入 1；如果该参数为 false，则该方法写入 0
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeBoolean(value: boolean): void;
            /**
                * 在字节流中写入一个字节
                * 使用参数的低 8 位。忽略高 24 位
                * @param value 一个 32 位整数。低 8 位将被写入字节流
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeByte(value: number): void;
            /**
                * 将指定字节数组 bytes（起始偏移量为 offset，从零开始的索引）中包含 length 个字节的字节序列写入字节流
                * 如果省略 length 参数，则使用默认长度 0；该方法将从 offset 开始写入整个缓冲区。如果还省略了 offset 参数，则写入整个缓冲区
                * 如果 offset 或 length 超出范围，它们将被锁定到 bytes 数组的开头和结尾
                * @param bytes ByteArray 对象
                * @param offset 从 0 开始的索引，表示在数组中开始写入的位置
                * @param length 一个无符号整数，表示在缓冲区中的写入范围
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeBytes(bytes: ByteArray, offset?: number, length?: number): void;
            /**
                * 在字节流中写入一个 IEEE 754 双精度（64 位）浮点数
                * @param value 双精度（64 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeDouble(value: number): void;
            /**
                * 在字节流中写入一个 IEEE 754 单精度（32 位）浮点数
                * @param value 单精度（32 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeFloat(value: number): void;
            /**
                * 在字节流中写入一个带符号的 32 位整数
                * @param value 要写入字节流的整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeInt(value: number): void;
            /**
                * 在字节流中写入一个 16 位整数。使用参数的低 16 位。忽略高 16 位
                * @param value 32 位整数，该整数的低 16 位将被写入字节流
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeShort(value: number): void;
            /**
                * 在字节流中写入一个无符号的 32 位整数
                * @param value 要写入字节流的无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeUnsignedInt(value: number): void;
            /**
                * 在字节流中写入一个无符号的 16 位整数
                * @param value 要写入字节流的无符号整数
                * @version Egret 2.5
                * @platform Web,Native
                * @language zh_CN
                */
            writeUnsignedShort(value: number): void;
            /**
                * 将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节
                * @param value 要写入的字符串值
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeUTF(value: string): void;
            /**
                * 将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的词为字符串添加前缀
                * @param value 要写入的字符串值
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            writeUTFBytes(value: string): void;
            /**
                *
                * @returns
                * @version Egret 2.4
                * @platform Web,Native
                */
            toString(): string;
            /**
                * @private
                * 将 Uint8Array 写入字节流
                * @param bytes 要写入的Uint8Array
                * @param validateBuffer
                */
            _writeUint8Array(bytes: Uint8Array | ArrayLike<number>, validateBuffer?: boolean): void;
            /**
                * @param len
                * @returns
                * @version Egret 2.4
                * @platform Web,Native
                * @private
                */
            validate(len: number): boolean;
            /**
                * @private
                * @param len
                * @param needReplace
                */
            protected validateBuffer(len: number): void;
    }
}

declare module 'drongo-cc/events/IEventDispatcher' {
    /**
        * 事件分发器
        */
    export interface IEventDispatcher {
            /**
                * 添加事件
                * @param key
                * @param caller
                * @param handler
                * @param priority 优先级 数字越小优先级越高
                */
            on(key: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any, priority?: number): void;
            /**
                * 删除事件监听
                * @param key
                * @param caller
                * @param handler
                */
            off(key: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any): void;
            /**
                * 删除指定对象所有的事件处理
                * @param caller
                */
            offByCaller(caller: any): void;
            /**
                * 删除所有事件监听
                */
            offAllEvent(): void;
            /**
                * 派发事件
                * @param key
                * @param data
                */
            emit(key: string, data?: any): void;
            /**
                * 是否有事件监听
                * @param key
                */
            hasEvent(key: string): boolean;
            /**
                * 是否包含指定函数事件监听
                * @param key
                * @param caller
                * @param handler
                */
            hasEventHandler(key: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any): boolean;
    }
}

declare module 'drongo-cc/events/Event' {
    import { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    export class Event {
            static readonly START: string;
            static readonly PROGRESS: string;
            static readonly COMPLETE: string;
            static readonly ERROR: string;
            static readonly SHOW: string;
            static readonly HIDE: string;
            static readonly ADD: string;
            static readonly REMOVE: string;
            static readonly UPDATE: string;
            static readonly CLEAR: string;
            static readonly State_Changed: string;
            /**
                * 获取事件通道
                * @param key
                * @returns
                */
            static getChannel(key?: string): EventDispatcher;
            /**
                * 派发事件
                * @param eventType
                * @param data
                * @param channel   通道
                */
            static emit(eventType: string, data?: any, channel?: string): void;
            /**
                * 添加事件监听
                * @param type
                * @param handler
                * @param caller
                * @param priority  优先级
                * @param channel   事件通道
                */
            static on(type: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any, priority?: number, channel?: string): void;
            /**
                * 删除事件监听
                * @param type
                * @param handler
                * @param caller
                * @param channel
                * @returns
                */
            static off(type: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any, channel?: string): void;
            /**
                * 删除指定对象上的所有事件监听
                * @param caller
                * @param channel
                * @returns
                */
            static offByCaller(caller: any, channel?: string): void;
            /**
                * 删除指定通道上的所有事件监听
                * @param channel
                * @returns
                */
            static offAll(channel?: string): void;
    }
}

declare module 'drongo-cc/events/EventDispatcher' {
    import { IEventDispatcher } from "drongo-cc/events/IEventDispatcher";
    /**
        * 事件分发器(只有一对多的情况下去使用)
        */
    export class EventDispatcher implements IEventDispatcher {
            constructor();
            /**
                * 添加事件
                * @param key
                * @param caller
                * @param func
                * @param priority 优先级（数字越小优先级越高）
                */
            on(key: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any, priority?: number): void;
            /**
                * 删除事件监听
                * @param key
                * @param caller
                * @param handler
                */
            off(key: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any): void;
            /**
                * 删除指定对象所有的事件处理
                * @param caller
                */
            offByCaller(caller: any): void;
            /**
                * 删除所有事件监听
                */
            offAllEvent(): void;
            /**
                * 派发事件
                * @param type
                * @param data
                */
            emit(type: string, data?: any): void;
            /**
                * 是否有事件监听
                * @param key
                */
            hasEvent(key: string): boolean;
            /**
                * 是否包含指定函数事件监听
                * @param key
                * @param caller
                * @param func
                */
            hasEventHandler(key: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any): boolean;
            destroy(): void;
    }
}

declare module 'drongo-cc/containers/List' {
    import { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    /**
        * 列表
        */
    export class List<T> extends EventDispatcher {
            /**
                * 元素数量(内部再增删时会修改这个参数，外部只做计算和绑定使用，切记不可做赋值操作！)
                */
            count: number;
            constructor(only?: boolean);
            /**
                * 添加到末尾(注意如果保证唯一性，那么重复时就直接返回)
                * @param value
                */
            push(value: T): boolean;
            /**
                * 添加到列表头部(注意如果保证唯一性，那么重复时就直接返回)
                * @param value
                * @returns
                */
            unshift(value: T): boolean;
            /**
                * 获取并删除最后一个元素
                * @returns
                */
            pop(): T;
            /**
                * 获取并删除第一个元素
                * @returns
                */
            shift(): T;
            /**
                * 删除指定索引的元素
                * @param index
                */
            removeAt(index: number): T;
            /**
                * 删除元素
                * @param value
                */
            remove(value: T): void;
            /**
                * 移除所有元素
                */
            clear(): void;
            /**
                * 判断是否包含
                * @param value
                * @returns
                */
            has(value: T): boolean;
            /**
                * 查找元素下标
                * @param value
                * @returns
                */
            find(value: T): number;
            /**
                * 查找元素下标
                * @param predicate
                * @returns
                */
            findIndex(predicate: (value: T, index: number, obj: T[]) => unknown): number;
            /**
                * 获取指定元素
                * @param index
                * @returns
                */
            get(index: number): T;
            /**
                * 源列表数据(注意不要直接进行增删操作，而是通过List.push....等接口进行操作)
                */
            get elements(): Array<T>;
    }
}

declare module 'drongo-cc/containers/Dictionary' {
    import { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    /**
        * 字典
        */
    export class Dictionary<TKey, TValue> extends EventDispatcher {
            constructor();
            set(key: TKey, value: TValue): void;
            /**
                * 是否拥有指定KEY的元素
                * @param key
                * @returns
                */
            has(key: TKey): boolean;
            /**
                * 获取指定元素
                * @param key
                * @returns
                */
            get(key: TKey): TValue | undefined;
            /**
                * 通过索引获取元素
                * @param index
                * @returns
                */
            getValue(index: number): TValue | undefined;
            /**
                * 删除指定元素
                * @param key
                * @returns
                */
            delete(key: TKey): TValue | undefined;
            /**
                * 清除所有元素
                */
            clear(): void;
            /**
             * 元素列表
             */
            get elements(): Array<TValue>;
            get size(): number;
            destroy(): void;
    }
}

declare module 'drongo-cc/bindings/BindingUtils' {
    import { Handler } from "drongo-cc/utils/Handler";
    /**
        * 属性与属性数据
        */
    export interface PropertyBindInfo {
            /**
                * 数据源对象
                */
            source: any;
            /**
                * 数据源属性名
                */
            property: string | Array<string>;
            /**
                * 目标对象
                */
            targetOrCallback: any | Function;
            /**
                * 目标属性名
                */
            targetPropertyOrCaller: string | any;
    }
    /**
        * 方法与方法绑定信息
        */
    export interface FunctionHookInfo {
            source: any;
            functionName: string;
            preHandler: Handler;
            laterHandler: Handler;
    }
    /**
        * 绑定工具类
        */
    export class BindingUtils {
            constructor();
            /**
                * 属性和属性的绑定
                * @param source            数据源
                * @param property          数据源属性名
                * @param target            目标对象
                * @param targetProperty    目标对象属性名
                */
            bindAA(source: any, property: string, target: any, targetProperty: string): void;
            /**
                * 取消属性和属性的绑定
                * @param source
                * @param property
                * @param target
                * @param targetProperty
                */
            unbindAA(source: any, property: string, target: any, targetProperty: string): void;
            /**
                * 属性和函数的绑定
                * @param source
                * @param property
                * @param callBack
                * @param caller
                */
            bindAM(source: any, property: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 取消属性和函数的绑定
                * @param source
                * @param propertys
                * @param callBack
                * @param caller
                */
            unbidAM(source: any, propertys: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 函数和函数的绑定
                * @param source
                * @param functionName  目标函数
                * @param preHandle     该函数将在目标函数调用前调用
                * @param laterHandler  该函数将在目标函数调用后调用
                */
            bindMM(source: any, functionName: string, preHandle: Handler, laterHandler?: Handler): void;
            /**
                * 取消方法和方法的绑定关系
                * @param source
                * @param functionName
                * @param preHandle
                * @param laterHandler
                */
            unbindMM(source: any, functionName: string, preHandle: Handler, laterHandler: Handler): void;
            bindByRecords(): void;
            unbindByRecords(): void;
            /**
                * 销毁
                */
            destroy(): void;
    }
}

declare module 'drongo-cc/bindings/BinderUtils' {
    import { Handler } from "drongo-cc/utils/Handler";
    /**
        * 绑定器工具类
        */
    export class BinderUtils {
            constructor();
            /**
                * 绑定
                * @param group
                * @param source
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                */
            static bind(group: any, source: any, property: string | Array<string>, targetOrCallBack: any | Function, tPropertyOrCaller: string | any): void;
            /**
                * 取消绑定
                * @param group
                * @param source
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            static unbind(group: any, source: any, property?: string | Array<string>, targetOrCallBack?: any | Function, tPropertyOrCaller?: string | any): void;
            /**
                * 添加函数钩子
                * @param group
                * @param source
                * @param functionName
                * @param preHandler
                * @param laterHandler
                */
            static addHook(group: any, source: any, functionName: string, preHandler: Handler, laterHandler: Handler): void;
            /**
                * 删除函数钩子
                * @param group
                * @param source
                * @param functionName
                * @param preHandler
                * @param laterHandler
                * @returns
                */
            static removeHook(group: any, source: any, functionName?: string, preHandler?: Handler, laterHandler?: Handler): void;
    }
}

declare module 'drongo-cc/bindings/FunctionHook' {
    import { Handler } from "drongo-cc/utils/Handler";
    /**
        * 函数钩子信息
        */
    export class FunctionHookInfo {
            /**
                * 方法名
                */
            functionName: string;
            /**
                * 前置处理器
                */
            preHandler: Handler;
            /**
                * 后置处理器
                */
            laterHandler: Handler;
            equal(functionName: string, preHandler: Handler, laterHandler: Handler): boolean;
    }
    export class FunctionHook {
            data: any;
            constructor(data: any);
            /**
                * 添加钩子
                * @param group
                * @param functionName
                * @param preHandlers
                * @param laterHandlers
                */
            addHook(group: any, functionName: string, preHandler: Handler, laterHandler: Handler): void;
            /**
                * 删除钩子
                * @param group
                * @param functionName
                * @param preHandler
                * @param laterHandler
                * @returns
                */
            removeHook(group: any, functionName?: string, preHandler?: Handler, laterHandler?: Handler): void;
    }
}

declare module 'drongo-cc/bindings/PropertyBinder' {
    /**
        * 绑定信息
        */
    export class BindInfo {
            /**
                * 属性KEY
                */
            property: string;
            /**
                * 目标或回调函数
                */
            targetOrCallBack: any | Function;
            /**
                * 目标属性或目标this引用
                */
            tPropertyOrCaller: string | any;
            constructor(property: string, targetOrCallBack: any | Function, tPropertyOrCaller: string | any);
            /**
                * 判断是否相等
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            equal(property: string, targetOrCallBack: any | Function, tPropertyOrCaller: string | any): boolean;
    }
    /**
        * 属性绑定器
        */
    export class PropertyBinder {
            data: any;
            constructor(data: any);
            /**
                * 绑定
                * @param group
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            bind(group: any, property: string | Array<string>, targetOrCallBack: any | Function, tPropertyOrCaller: string | any): void;
            /**
                * 取消绑定
                * @param group
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            unbind(group: any, property?: string | Array<string>, targetOrCallBack?: any | Function, tPropertyOrCaller?: string | any): void;
    }
}

declare module 'drongo-cc/ticker/ITicker' {
    /**
        * 心跳器接口
        */
    export interface ITicker {
            /**
                * 心跳
                * @param dt  间隔时间(秒)
                */
            tick(dt: number): void;
    }
}

declare module 'drongo-cc/ticker/ITickerManager' {
    import { ITicker } from "drongo-cc/ticker/ITicker";
    export interface ITickerManager {
            /**
                * 添加心跳
                * @param value
                */
            addTicker(value: ITicker): void;
            /**
                * 删除心跳
                * @param value
                */
            removeTicker(value: ITicker): void;
            /**
                * 下一帧回调
                * @param value
                * @param caller
                */
            callNextFrame(value: Function, caller: any): void;
            /**
                * 清理下一帧回调请求(如果存在的话)
                * @param value
                * @param caller
                */
            clearNextFrame(value: Function, caller: any): void;
    }
}

declare module 'drongo-cc/ticker/TickerManager' {
    import { ITicker } from "drongo-cc/ticker/ITicker";
    import { ITickerManager } from "drongo-cc/ticker/ITickerManager";
    /**
        * 心跳管理器
        */
    export class TickerManager {
            static KEY: string;
            /**
                * 添加
                * @param value
                */
            static addTicker(value: ITicker): void;
            /**
                * 删除
                * @param value
                */
            static removeTicker(value: ITicker): void;
            /**
                * 下一帧回调
                * @param value
                */
            static callNextFrame(value: Function, caller: any): void;
            static clearNextFrame(value: Function, caller: any): void;
            static get impl(): ITickerManager;
    }
}

declare module 'drongo-cc/timer/ITimer' {
    export interface ITimer {
            /**
                * 当前时间(推荐使用)
                */
            readonly currentTime: number;
            /**
                * 绝对时间(注意效率较差，不推荐使用！)
                */
            readonly absTime: number;
            /**
                * 重新校准
                */
            reset(time?: number): void;
    }
}

declare module 'drongo-cc/timer/Timer' {
    /**
        * 时间工具类
        */
    export class Timer {
            static KEY: string;
            /**
                * 当前时间(推荐使用)
                */
            static get currentTime(): number;
            /**
                * 绝对时间(注意效率较差，不推荐使用！)
                */
            static get absTime(): number;
            /**
                * 重新校准
                * @param time  时间起点，如果不设置则获取系统当前时间点
                */
            static reset(time?: number): void;
    }
}

declare module 'drongo-cc/audios/IAudioChannel' {
    import { ResURL } from "drongo-cc/res/ResURL";
    /**
        * 音频通道
        */
    export interface IAudioChannel {
            readonly isPlaying: boolean;
            readonly url: ResURL;
            readonly curVolume: number;
            /**
                * 音量
                */
            volume: number;
            mute: boolean;
            /**
                * 播放
                * @param url
                * @param playedComplete
                * @param volume
                * @param fade
                * @param loop
                * @param speed
                */
            play(url: ResURL, playedComplete: Function, volume: number, fade: {
                    time: number;
                    startVolume: number;
                    complete?: Function;
            }, loop: boolean, speed: number): void;
            /**
                * 停止
                */
            stop(): void;
            /**
                *
                * @param time
                * @param startVolume
                * @param endVolume
                * @param complete
                * @param completeStop  结束后是否停止播放
                */
            fade(time: number, endVolume: number, startVolume?: number, complete?: Function, completeStop?: boolean): void;
            /**
                * 心跳
                * @param dt
                */
            tick(dt: number): void;
            pause(): void;
            resume(): void;
    }
}

declare module 'drongo-cc/audios/IAudioGroup' {
    import { ResURL } from "drongo-cc/res/ResURL";
    import { IAudioChannel } from "drongo-cc/audios/IAudioChannel";
    /**
      * 音频组
      */
    export interface IAudioGroup {
        key: number;
        volume: number;
        calculateVolume(): void;
        mute: boolean;
        calculateMute(): void;
        tick(dt: number): void;
        play(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
        getPlayingChannel(url: ResURL): IAudioChannel;
        stopAll(): void;
    }
}

declare module 'drongo-cc/audios/IAudioManager' {
    import { ResURL } from "drongo-cc/res/ResURL";
    import { IAudioChannel } from "drongo-cc/audios/IAudioChannel";
    /**
        * 音频管理器
        */
    export interface IAudioManager {
            /**
                * 总音量
                */
            volume: number;
            /**
                * 音乐音量
                */
            musicVolume: number;
            /**
                * 声音音量
                */
            soundVolume: number;
            mute: boolean;
            muteMusic: boolean;
            muteSound: boolean;
            /**
                * 播放音乐
                * @param value
                */
            playMusic(url: ResURL, volume: number, speed: number, loop: boolean): void;
            /**
                * 停止音乐
                */
            stopMusic(): void;
            /**
                * 暂停
                */
            pauseMusic(): void;
            /**
                * 继续播放
                */
            resumeMusic(): void;
            /**
                * 播放声音
                * @param value
                */
            playSound(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
            /**
                * 获取正在播放指定音频的轨道
                * @param url
                */
            getPlaying(url: ResURL): IAudioChannel;
    }
}

declare module 'drongo-cc/audios/AudioChannel' {
    import { AudioSource, Node } from "cc";
    import { ResURL } from "drongo-cc/res/ResURL";
    import { IAudioChannel } from "drongo-cc/audios/IAudioChannel";
    export class AudioChannel implements IAudioChannel {
        volume: number;
        constructor(node: Node, source?: AudioSource);
        get url(): ResURL;
        get mute(): boolean;
        set mute(value: boolean);
        play(url: ResURL, playedComplete: Function, volume: number, fade?: {
            time: number;
            startVolume?: number;
            complete?: Function;
            completeStop?: boolean;
        }, loop?: boolean, speed?: number): void;
        stop(): void;
        get isPlaying(): boolean;
        /**
          *
          * @param time
          * @param endVolume
          * @param startVolume
          * @param complete
          * @param completeStop
          * @returns
          */
        fade(time: number, endVolume: number, startVolume?: number, complete?: Function, completeStop?: boolean): void;
        tick(dt: number): void;
        resume(): void;
        pause(): void;
        get curVolume(): number;
    }
}

declare module 'drongo-cc/audios/AudioManager' {
    import { ResURL } from "drongo-cc/res/ResURL";
    import { IAudioChannel } from "drongo-cc/audios/IAudioChannel";
    /**
        * 音频管理器
        */
    export class AudioManager {
            /**
                * 全局唯一注入KEY
                */
            static KEY: string;
            /**
                * 最大音频轨道数量
                */
            static MAX_SOUND_CHANNEL_COUNT: number;
            /**
                * 总音量
                */
            static get volume(): number;
            static set volume(value: number);
            /**
                * 音乐音量
                */
            static get musicVolume(): number;
            static set musicVolume(value: number);
            /**
                * 声音音量
                */
            static get soundVolume(): number;
            static set soundVolume(value: number);
            /**
                * 静音总开关
                */
            static get mute(): boolean;
            static set mute(value: boolean);
            /**
                * 音乐静音开关
                */
            static get muteMusic(): boolean;
            static set muteMusic(value: boolean);
            /**
                * 声音静音开关
                */
            static get muteSound(): boolean;
            static set muteSound(value: boolean);
            /**
                * 播放音乐
                * @param value
                */
            static playMusic(url: ResURL, volume?: number, speed?: number, loop?: boolean): void;
            /**
                * 停止音乐
                */
            static stopMusic(): void;
            /**
                * 暂停
                */
            static pauseMusic(): void;
            /**
                * 继续播放
                */
            static resumeMusic(): void;
            /**
                * 播放声音
                * @param value
                */
            static playSound(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
            /**
                * 获取正在播放指定音频的轨道
                * @param url
                */
            static getPlaying(url: ResURL): IAudioChannel;
    }
}

declare module 'drongo-cc/res/IResource' {
    import { ResRef } from "drongo-cc/res/ResRef";
    /**
        * 资源接口
        */
    export interface IResource {
            /**
                * 资源全局唯一KEY
                */
            key: string;
            /**
                * 最后一次操作的时间点
                */
            lastOpTime: number;
            /**
                * 资源
                */
            content: any;
            /**
                * 资源引用数量
                */
            readonly refCount: number;
            /**
                * 资源引用列表长度
                */
            readonly refLength: number;
            /**
                * 添加一个引用
                * @param refKey
                */
            addRef(refKey?: string): ResRef;
            /**
                * 删除引用
                * @param value
                */
            removeRef(value: ResRef): void;
            /**销毁*/
            destroy(): void;
    }
}

declare module 'drongo-cc/res/IResManager' {
    import { ITicker } from "drongo-cc/ticker/ITicker";
    import { IResource } from "drongo-cc/res/IResource";
    import { ResRef } from "drongo-cc/res/ResRef";
    /**
        * 资源管理器接口
        */
    export interface IResManager extends ITicker {
            /**
                * 添加一个资源
                * @param value
                */
            addRes(value: IResource): void;
            /**
                * 获取资源(内部接口)
                * @param key
                */
            _getRes(key: string): IResource;
            /**
                * 是否包含该资源
                * @param key
                */
            hasRes(key: string): boolean;
            /**
                * 添加并返回一个资源引用
                * @param key
                * @param refKey
                */
            addResRef(key: string, refKey?: string): ResRef;
            /**
                * 删除一个资源引用
                * @param value
                */
            removeResRef(value: ResRef): void;
            /**
                * 资源清理
                */
            gc(ignoreTime?: boolean): void;
            /**
                * 资源列表
                */
            readonly resList: Array<IResource>;
    }
}

declare module 'drongo-cc/res/ResManager' {
    import { IResource } from "drongo-cc/res/IResource";
    import { ResRef } from "drongo-cc/res/ResRef";
    export class ResManager {
            static KEY: string;
            /**
                * 资源保留长时间GC
                */
            static GC_TIME: number;
            /**
                * 自动清理
                */
            static AUTO_GC: boolean;
            /**
                * 添加一个资源
                * @param value
                */
            static addRes(value: IResource): void;
            /**
                * 是否包含该资源
                * @param key
                */
            static hasRes(key: string): boolean;
            /**
                * 获取资源（内部接口）
                * @param key
                * @returns
                */
            static _getRes(key: string): IResource;
            /**
                * 添加并返回一个资源引用
                * @param key
                * @param refKey
                */
            static addResRef(key: string, refKey?: string): ResRef;
            /**
                * 删除一个资源引用
                * @param value
                */
            static removeResRef(value: ResRef): void;
            /**
                * 资源清理
                */
            static gc(ignoreTime?: boolean): void;
            /**
                * 资源列表
                * @returns
                */
            static resList(): Array<IResource>;
    }
}

declare module 'drongo-cc/res/Resource' {
    import { IRecyclable } from "drongo-cc/utils/Pool";
    import { IResource } from "drongo-cc/res/IResource";
    import { ResRef } from "drongo-cc/res/ResRef";
    export class Resource implements IResource, IRecyclable {
            /**
                * 状态 0 正常 1待删除
                */
            state: number;
            key: string;
            lastOpTime: number;
            constructor();
            reset(): void;
            set content(value: any);
            get content(): any;
            addRef(refKey?: string): ResRef;
            removeRef(value: ResRef): void;
            destroy(): void;
            /**
                * 引用数量
                */
            get refCount(): number;
            /**
                * 引用列表长度
                */
            get refLength(): number;
    }
}

declare module 'drongo-cc/res/Res' {
    import { AssetManager } from "cc";
    import { ResRef } from "drongo-cc/res/ResRef";
    import { ResURL } from "drongo-cc/res/ResURL";
    /**
        * 资源加载器
        */
    export type ResLoader = (url: ResURL, bundle: AssetManager.Bundle, refKey: string, progress?: (progress: number) => void, cb?: (err: Error, resRef: ResRef) => void) => void;
    export class Res {
            static setResLoader(key: string, loader: ResLoader): void;
            static getResLoader(key: string): ResLoader;
            /**
                * 获取资源引用
                * @param url
                * @param refKey    谁持有该引用
                * @param progress  进度汇报函数
                * @returns
                */
            static getResRef(url: ResURL, refKey: string, progress?: (progress: number) => void): Promise<ResRef>;
            /**
                * 获取资源引用列表
                * @param urls
                * @param refKey
                * @param progress
                * @returns
                */
            static getResRefList(urls: Array<ResURL>, refKey: string, progress?: (progress: number) => void): Promise<Array<ResRef>>;
            /**
                * 获取资源引用字典
                * @param urls
                * @param refKey
                * @param result
                * @param progress
                * @returns
                */
            static getResRefMap(urls: Array<ResURL>, refKey: string, result?: Map<string, ResRef>, progress?: (progress: number) => void): Promise<Map<string, ResRef>>;
            /**
                * 默认加载器
                * @param url
                * @param bundle
                * @param progress
                * @param cb
                */
            static defaultAssetLoader(url: ResURL, bundle: AssetManager.Bundle, refKey: string, progress?: (progress: number) => void, cb?: (err?: Error, resRef?: ResRef) => void): void;
    }
}

declare module 'drongo-cc/res/ResRef' {
    export class ResRef {
            /**唯一KEY */
            key: string;
            /**引用KEY */
            refKey: string | undefined;
            /**资源内容 */
            content: any;
            constructor();
            /**释放 */
            dispose(): void;
            get isDispose(): boolean;
            reset(): void;
            /**
                * 彻底销毁(注意内部接口，请勿调用)
                */
            destroy(): void;
    }
}

declare module 'drongo-cc/res/ResURL' {
    import { Asset } from "cc";
    export type ResURL = string | {
            url: string;
            bundle: string;
            type: string | typeof Asset;
    };
    /**
        * 资源地址转唯一KEY
        * @param url
        * @returns
        */
    export function url2Key(url: ResURL): string;
    /**
        * 唯一key转URL
        * @param key
        * @returns
        */
    export function key2URL(key: string): ResURL;
    /**
        * 获取全路径
        * @param url
        * @returns
        */
    export function fullURL(url: ResURL): string;
}

declare module 'drongo-cc/task/ITask' {
    import { IEventDispatcher } from "drongo-cc/events/IEventDispatcher";
    /**
        * 任务接口
        */
    export interface ITask extends IEventDispatcher {
            /**
                * 开始
                * @param data
                */
            start(data?: any): void;
            /**
                * 销毁
                */
            destroy(): void;
    }
}

declare module 'drongo-cc/task/TaskQueue' {
    import { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    import { ITask } from "drongo-cc/task/ITask";
    /**
      * 任务队列
      */
    export class TaskQueue extends EventDispatcher implements ITask {
        constructor();
        addTask(value: ITask): void;
        removeTask(value: ITask): void;
        start(data?: any): void;
        destroy(): void;
    }
}

declare module 'drongo-cc/task/TaskSequence' {
    import { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    import { ITask } from "drongo-cc/task/ITask";
    /**
      * 任务序列（并行）
      */
    export class TaskSequence extends EventDispatcher implements ITask {
        constructor();
        addTask(value: ITask): void;
        removeTask(value: ITask): void;
        start(data?: any): void;
        destroy(): void;
    }
}

declare module 'drongo-cc/entitys/matchers/IMatcher' {
    export interface IMatcher {
        readonly flags: number;
        readonly elements: Array<number>;
    }
}

declare module 'drongo-cc/entitys/matchers/Matcher' {
    import { BitFlag } from "drongo-cc/utils/BitFlag";
    import { IMatcher } from "drongo-cc/entitys/matchers/IMatcher";
    export class Matcher extends BitFlag implements IMatcher {
        constructor(flags: Array<number>);
    }
}

declare module 'drongo-cc/entitys/matchers/MatcherAllOf' {
    import { Matcher } from "drongo-cc/entitys/matchers/Matcher";
    /**
      * 必须所有成立
      */
    export class MatcherAllOf extends Matcher {
    }
}

declare module 'drongo-cc/entitys/matchers/MatcherAnyOf' {
    import { Matcher } from "drongo-cc/entitys/matchers/Matcher";
    /**
      * 任意一个成立
      */
    export class MatcherAnyOf extends Matcher {
    }
}

declare module 'drongo-cc/entitys/matchers/MatcherNoneOf' {
    import { Matcher } from "drongo-cc/entitys/matchers/Matcher";
    /**
      * 不能包含
      */
    export class MatcherNoneOf extends Matcher {
    }
}

declare module 'drongo-cc/entitys/Component' {
    import { Entity } from "drongo-cc/entitys/Entity";
    export class Component {
            /**
                * 所属实体
                */
            entity: Entity;
            /**
                * 类型
                */
            get type(): number;
            dispose(): void;
    }
}

declare module 'drongo-cc/entitys/Entity' {
    import { Component } from "drongo-cc/entitys/Component";
    import { Group } from "drongo-cc/entitys/Group";
    import { World } from "drongo-cc/entitys/World";
    export class Entity {
            constructor(id: string, world: World);
            /**
                * 添加组件
                * @param value
                */
            addComponent(value: Component): Component;
            /**
                * 删除组件
                * @param id
                */
            removeComponent(value: Component): void;
            /**
                * 获取组件
                * @param type
                */
            getComponent(type: number): Component;
            /**
                * 获取组件列表
                * @param type
                * @returns
                */
            getComponents(type: number): Array<Component>;
            /**
                * 唯一ID
                */
            get id(): string;
            /**
                * 销毁
                */
            dispose(): void;
            /**
                * 是否符合匹配规则
                * @param group
                */
            _matcherGroup(group: Group): boolean;
    }
}

declare module 'drongo-cc/entitys/Group' {
    import { Dictionary } from "drongo-cc/containers/Dictionary";
    import { Entity } from "drongo-cc/entitys/Entity";
    import { MatcherAllOf } from "drongo-cc/entitys/matchers/MatcherAllOf";
    import { MatcherAnyOf } from "drongo-cc/entitys/matchers/MatcherAnyOf";
    import { MatcherNoneOf } from "drongo-cc/entitys/matchers/MatcherNoneOf";
    export class Group {
            /**
                * 全部包含或任意包含
                */
            matcher: MatcherAllOf | MatcherAnyOf;
            /**
                * 不能包含的
                */
            matcherNoneOf: MatcherNoneOf;
            /**
                * 编组所匹配的元素(内部接口)
                */
            _entitys: Dictionary<string, Entity>;
            constructor();
            init(allOrAny: MatcherAllOf | MatcherAnyOf, none?: MatcherNoneOf): void;
            get id(): string;
            static create(allOrAny: MatcherAllOf | MatcherAnyOf, none?: MatcherNoneOf): Group;
            static recycle(value: Group): void;
    }
}

declare module 'drongo-cc/entitys/System' {
    import { MatcherAllOf } from "drongo-cc/entitys/matchers/MatcherAllOf";
    import { MatcherAnyOf } from "drongo-cc/entitys/matchers/MatcherAnyOf";
    import { MatcherNoneOf } from "drongo-cc/entitys/matchers/MatcherNoneOf";
    import { Group } from "drongo-cc/entitys/Group";
    export class System {
            /**
                * 内部接口
                */
            _group: Group;
            /**
                * 系统
                * @param allOrAny  所有或任意一个包含
                * @param none      不能包含
                */
            constructor(allOrAny: MatcherAllOf | MatcherAnyOf, none?: MatcherNoneOf);
            tick(time: number): void;
    }
}

declare module 'drongo-cc/entitys/World' {
    import { Component } from "drongo-cc/entitys/Component";
    import { Entity } from "drongo-cc/entitys/Entity";
    import { Group } from "drongo-cc/entitys/Group";
    import { System } from "drongo-cc/entitys/System";
    export class World {
            constructor();
            /**
                * 心跳驱动
                * @param time
                */
            tick(time: number): void;
            /**
                * 创建一个实体
                */
            createEntity(id: string): Entity;
            /**
                * 通过ID获取实体
                * @param id
                */
            getEntity(id: string): Entity;
            /**
                * 添加系统
                */
            addSystem(value: System): void;
            /**
                * 删除系统
                * @param value
                */
            removeSystem(value: System): void;
            /**
                * 根据类型获取组件列表
                * @param type
                */
            getComponent(type: number): Component[];
            _matcherGroup(group: Group): void;
            /**
                * 内部接口，请勿调用
                * @param com
                */
            _addComponent(com: Component): void;
            /**
                * 内部接口，请勿调用
                * @param com
                */
            _removeComponent(com: Component): void;
            /**
                * 内部接口，请勿调用
                * @param value
                */
            _removeEntity(value: Entity): void;
    }
}

declare module 'drongo-cc/fsm/IState' {
    import { FSM } from "drongo-cc/fsm/FSM";
    /**
      * 状态接口
      */
    export interface IState {
        name: string;
        /**初始化 */
        init(content: FSM): void;
        /**进入 */
        enter(data?: any): void;
        /**心跳 */
        tick(dt: number): void;
        /**退出 */
        exit(): void;
        /**销毁 */
        destroy(): void;
    }
}

declare module 'drongo-cc/fsm/FSM' {
    import { EventDispatcher } from "drongo-cc/events/EventDispatcher";
    import { IState } from "drongo-cc/fsm/IState";
    /**
        * 状态机
        */
    export class FSM extends EventDispatcher {
            /**所属*/
            owner: any;
            debug: boolean;
            constructor(owner: any, name: string);
            tick(dt: number): void;
            /**
                * 添加
                * @param key
                * @param v
                */
            addState(key: number, v: IState): void;
            /**
                * 切换状态
                * @param value
                * @param data
                * @returns
                */
            switchState(value: number, data?: any): void;
            get state(): number;
            get current(): IState;
            destroy(): void;
    }
}

declare module 'drongo-cc/gui/layer/ILayer' {
    export interface ILayer {
            addChild(child: any): void;
            addChildAt(child: any, index: number): void;
            removeChild(child: any): void;
            removeChildAt(index: number): void;
            /**
                * 获取指定索引内容
                * @param index
                */
            getChildAt(index: number): any;
            /**
                * 当前层拥有的子对象数量
                */
            getCount(): number;
    }
}

declare module 'drongo-cc/gui/layer/ILayerManager' {
    import { ILayer } from "drongo-cc/gui/layer/ILayer";
    export interface ILayerManager {
            /**
                * 添加层
                * @param key
                * @param layer
                */
            addLayer(key: string, layer: ILayer): void;
            /**
                * 删除层
                * @param key
                */
            removeLayer(key: string): void;
            /**
                * 获取层对象
                * @param key
                */
            getLayer(key: string): ILayer | undefined;
            /**
                * 获得所有层
                */
            getAllLayer(): ILayer[];
    }
}

declare module 'drongo-cc/gui/layer/LayerManager' {
    import { ILayer } from "drongo-cc/gui/layer/ILayer";
    /**
        * 层管理器
        */
    export class LayerManager {
            static KEY: string;
            /**
                * 添加一个层
                * @param key
                * @param layer
                */
            static addLayer(key: string, layer: ILayer): void;
            /**
                * 删除层
                * @param key
                */
            static removeLayer(key: string): void;
            /**
                * 获取层对象
                * @param key
                */
            static getLayer(key: string): ILayer | undefined;
            /**
                * 获得所有层
                */
            static getAllLayer(): ILayer[];
    }
}

declare module 'drongo-cc/gui/core/GUIState' {
    export enum GUIState {
            /**
                * 未使用状态
                */
            Null = 0,
            /**
                * 显示处理中
                */
            Showing = 1,
            /**
                * 已显示
                */
            Showed = 2,
            /**
                * 关闭处理中
                */
            Closeing = 3,
            /**
                * 已关闭
                */
            Closed = 4
    }
}

declare module 'drongo-cc/gui/core/IGUIMediator' {
    import { IViewComponent } from "drongo-cc/gui/core/IViewComponent";
    export interface IGUIMediator {
            info: any;
            /**
                * 依赖的服务
                */
            services: Array<string>;
            /**初始化完毕 */
            inited: boolean;
            /**
                * 显示节点
                */
            viewComponent: IViewComponent | null;
            /**
                * 播放显示动画
                * @param complete
                */
            playShowAnimation?: (complete: Function) => void;
            /**
                * 界面关闭时播放的动画
                * @param complete
                */
            playHideAnimation?: (complete: Function) => void;
            /**
                * 创建UI
                * @param info
                * @param created
                */
            createUI(info: any, created: Function): void;
            /**
                * 初始化
                */
            init(): void;
            /**
                * 心跳
                * @param dt
                */
            tick(dt: number): void;
            /**
                * 显示(内部接口，请勿调用)
                * @param data
                */
            show(data?: any): void;
            /**
                * 当已经处在显示中 GUIManager.call时 则调用该方法而不调用showedUpdate
                * @param data
                */
            showedUpdate(data?: any): void;
            /**
                * 隐藏(内部接口，请勿调用)
                * @param info
                */
            hide(): void;
            /**
                * 销毁
                */
            destroy(): void;
            /**
                * 获取组件
                * @param path
                */
            getUIComponent(path: string): any;
    }
}

declare module 'drongo-cc/gui/core/IGUIManager' {
    import { GUIState } from "drongo-cc/gui/core/GUIState";
    import { IGUIMediator } from "drongo-cc/gui/core/IGUIMediator";
    /**
        * UI管理器接口
        */
    export interface IGUIManager {
            /**
                * 注册
                * @param key
                * @param mediatorClass
                * @param data
                */
            register(info: {
                    key: string;
            }): void;
            /**
                * 注销
                * @param key
                */
            unregister(key: string): void;
            /**
                * 心跳
                * @param dt
                */
            tick(dt: number): void;
            /**
                * 打开
                * @param key
                * @param data
                */
            open(key: string, data?: any): void;
            /**
                * 关闭
                * @param key
                * @param checkLayer  是否检查全屏打开记录
                */
            close(key: string, checkLayer: boolean): void;
            /**
                * 关闭所有
                * @param key
                */
            closeAll(): void;
            /**
                * 是否已打开
                * @param key
                * @returns
                */
            getGUIState(key: string): GUIState;
            /**
                * 获取GUI中的某个组件
                * @param key    界面全局唯一KEY
                * @param path   组件名称/路径
                */
            getUIComponent(key: string, path: string): any;
            /**
                * 获取界面Mediator
                * @param key 界面全局唯一KEY
                */
            getMediatorByKey(key: string): IGUIMediator;
            /**
                * 获得前一个打开的全屏界面
                */
            getPrevLayer(): string;
            /**
                * 是否已打开或打开中
                * @param key
                */
            isOpen(key: string): boolean;
    }
}

declare module 'drongo-cc/gui/core/IViewComponent' {
    export interface IViewComponent {
        /**
          * 激活
          */
        visible: boolean;
    }
}

declare module 'drongo-cc/gui/core/IViewCreator' {
    import { IGUIMediator } from "drongo-cc/gui/core/IGUIMediator";
    /**
        * View创建者
        */
    export interface IViewCreator {
            /**
                * 创建Mediator
                */
            createMediator(): IGUIMediator;
    }
}

declare module 'drongo-cc/gui/GUIManager' {
    import { GUIState } from "drongo-cc/gui/core/GUIState";
    import { IGUIMediator } from "drongo-cc/gui/core/IGUIMediator";
    /**
                * GUI 管理器
                */
    export class GUIManager {
            static KEY: string;
            /**
                * 在界面关闭后多长时间不使用则销毁(秒)
                */
            static GUI_GC_INTERVAL: number;
            /**
                * 注册
                * @param info
                * @returns
                */
            static register(info: {
                    key: string;
            }): void;
            /**
                * 注销
                * @param key
                * @returns
                */
            static unregister(key: string): void;
            static open(key: string, data?: any): void;
            /**
                * 关闭
                * @param key
                * @param checkLayer 是否检查全屏记录
                */
            static close(key: string, checkLayer?: boolean): void;
            static closeAll(): void;
            /**
                * 获取界面状态
                * @param key
                * @returns  0 未显示  1显示中
                */
            static getGUIState(key: string): GUIState;
            /**
                * 是否已打开或再打开中
                * @param key
                * @returns
                */
            static isOpen(key: string): boolean;
            /**
                * 获取GUI中的某个组件
                * @param key    界面全局唯一KEY
                * @param path   组件名称/路径
                */
            static getUIComponent(key: string, path: string): any;
            /**
                * 获取界面的mediator
                */
            static getMediatorByKey(key: string): IGUIMediator;
            /**
                * 获得前一个打开的全屏界面
                * @param curLayerKey 当前打开的全屏界面
                */
            static getPrevLayer(): string;
    }
}

declare module 'drongo-cc/gui/relations/IRelationList' {
    /**
        * UI关联数据列表
        */
    export interface IRelationList {
            /**
                * 要显示的UI列表
                */
            show: Array<string>;
            /**
                * 要隐藏的UI列表
                */
            hide: Array<string>;
    }
}

declare module 'drongo-cc/gui/relations/IRelationInfo' {
    import { IRelationList } from "drongo-cc/gui/relations/IRelationList";
    /**
        * UI关联数据
        */
    export interface IRelationInfo {
            /**
                * 显示时的关联
                */
            show: IRelationList;
            /**
                * 隐藏时的关联
                */
            hide: IRelationList;
    }
}

declare module 'drongo-cc/gui/relations/RelationManager' {
    import { IRelationInfo } from "drongo-cc/gui/relations/IRelationInfo";
    /**
     * GUI 关联关系
     */
    export class RelationManager {
            constructor();
            static addRelation(key: string, value: IRelationInfo): void;
            static removeRelation(key: string): void;
            static getRelation(key: string): IRelationInfo;
    }
}

declare module 'drongo-cc/gui/loadingView/ILoadingData' {
    /**
      * 加载界面数据
      */
    export interface ILoadingData {
        label?: string;
        progress?: number;
        tip?: string;
    }
}

declare module 'drongo-cc/gui/loadingView/ILoadingView' {
    import { ILoadingData } from "drongo-cc/gui/loadingView/ILoadingData";
    /**
        * 加载界面
        */
    export interface ILoadingView {
            /**
                * 更新
                * @param data
                */
            changeData(data: ILoadingData): void;
            /**
                * 显示
                */
            show(): void;
            /**
                * 隐藏
                */
            hide(): void;
    }
}

declare module 'drongo-cc/gui/loadingView/LoadingView' {
    import { ILoadingData } from "drongo-cc/gui/loadingView/ILoadingData";
    import { ILoadingView } from "drongo-cc/gui/loadingView/ILoadingView";
    /**
      * 加载界面
      */
    export class LoadingView {
        static KEY: string;
        static show(): void;
        static hide(): void;
        static changeData(data: ILoadingData): void;
        static get impl(): ILoadingView;
    }
}

declare module 'drongo-cc/services/IService' {
    /**
        * 服务接口
        */
    export interface IService {
            /**
                * 名称
                */
            name: string;
            /**
                * 初始化
                * @param callback
                */
            init(callback: (err: Error, result: IService) => void): void;
            /**
                * 销毁
                */
            destroy(): void;
    }
}

declare module 'drongo-cc/services/BaseService' {
    import { ResRef } from "drongo-cc/res/ResRef";
    import { ResURL } from "drongo-cc/res/ResURL";
    import { IService } from "drongo-cc/services/IService";
    /**
        *  服务基类
        *  1.  如果有依赖的资源请在子类构造函数中给this.$configs和this.$assets进行赋值
        *  2.  重写$configAndAssetReady函数，并在完成初始化后调用this.initComplete()
        */
    export class BaseService implements IService {
            /**名称 */
            name: string;
            /**
                * 依赖的配置表名称
                */
            protected $configs: Array<string>;
            /**
                * 依赖的资源
                */
            protected $assets: Array<ResURL>;
            protected $assetRefs: Array<ResRef>;
            protected __initCallback: (err: Error, result: IService) => void;
            constructor();
            init(callback: (err: Error, result: IService) => void): void;
            /**
                * 依赖的配置与资源准备完毕
                */
            protected $configAndAssetReady(): void;
            /**
                * 初始化完成时调用
                */
            protected $initComplete(): void;
            destroy(): void;
    }
}

declare module 'drongo-cc/services/ServiceStarter' {
    import { IService } from "drongo-cc/services/IService";
    export class ServiceStarter<T extends IService> {
        constructor(name: string, serviceClass: {
            new (): IService;
        });
        /**
          * 启动
          */
        start(): Promise<T>;
        destroy(): void;
    }
}

declare module 'drongo-cc/services/ServiceManager' {
    import { IService } from "drongo-cc/services/IService";
    export class ServiceManager {
            constructor();
            /**
                * 注册服务
                * @param key
                * @param value
                */
            register(key: string, value: {
                    new (): IService;
            }): void;
            /**
                * 获取服务
                * @param key
                * @returns
                */
            getService<T extends IService>(key: string): Promise<T>;
            /**
                * 卸载服务
                * @param key
                */
            uninstall(key: string): void;
    }
    export var serviceManager: ServiceManager;
}

declare module 'drongo-cc/configs/core/IConfigAccessor' {
    /**
        * 配置存取器接口
        */
    export interface IConfigAccessor {
            /**
                * 保存
                * @param value
                */
            save(value: any): boolean;
            /**
                * 获取列表形式存储的配置内容
                */
            get<T>(): Array<T>;
    }
}

declare module 'drongo-cc/configs/core/IConfigManager' {
    import { IConfigAccessor } from "drongo-cc/configs/core/IConfigAccessor";
    /**
        * 配置管理器接口
        */
    export interface IConfigManager {
            /**
                * 注册存取器
                * @param sheet
                * @param accessors
                */
            register(sheet: string, accessors?: IConfigAccessor): void;
            /**
                * 加载配置文件
                * @param sheet
                * @param callback
                */
            load(sheet: string | Array<string>, callback: (err: Error) => void): void;
            /**
                * 获取配置存取器
                * @param sheet
                */
            getAccessor(sheet: string): IConfigAccessor;
    }
}

declare module 'drongo-cc/configs/BaseConfigAccessor' {
    import { IConfigAccessor } from "drongo-cc/configs/core/IConfigAccessor";
    /**
      * 配置存取器基类
      */
    export class BaseConfigAccessor implements IConfigAccessor {
        constructor();
        save(value: any): boolean;
        get<T>(): Array<T>;
    }
}

declare module 'drongo-cc/configs/ConfigManager' {
    import { ResURL } from "drongo-cc/res/ResURL";
    import { IConfigAccessor } from "drongo-cc/configs/core/IConfigAccessor";
    /**
        * 配置表管理器
        */
    export class ConfigManager {
            static KEY: string;
            static set configPath(value: (sheet: string) => ResURL);
            /**
                * 路径转化器
                */
            static get configPath(): (sheet: string) => ResURL;
            /**
                * 注册存取器
                * @param sheet
                * @param accessors
                */
            static register(sheet: string, accessors?: IConfigAccessor): void;
            /**
                * 加载配置文件
                * @param sheet
                * @param callback
                */
            static load(sheet: string | Array<string>, callback: (err: Error) => void): void;
            /**
                * 获取配置存取器
                * @param sheet
                */
            static getAccessor(sheet: string): IConfigAccessor;
    }
}

