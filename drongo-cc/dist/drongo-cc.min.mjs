"use strict";var cc=require("cc");class AudioManager{static get volume(){return this.impl.volume}static set volume(t){this.impl.volume=t}static get musicVolume(){return this.impl.musicVolume}static set musicVolume(t){this.impl.musicVolume=t}static get soundVolume(){return this.impl.soundVolume}static set soundVolume(t){this.impl.soundVolume=t}static get mute(){return this.impl.mute}static set mute(t){this.impl.mute=t}static get muteMusic(){return this.impl.muteMusic}static set muteMusic(t){this.impl.muteMusic=t}static get muteSound(){return this.impl.muteSound}static set muteSound(t){this.impl.muteSound=t}static playMusic(t,e=1,s=1,i=!1){this.impl.playMusic(t,e,s,i)}static stopMusic(){this.impl.stopMusic()}static pauseMusic(){this.impl.pauseMusic()}static resumeMusic(){this.impl.resumeMusic()}static playSound(t,e,s,i,n){this.impl.playSound(t,e,s,i,n)}static getPlaying(t){return this.impl.getPlaying(t)}static get impl(){if(null==this.__impl&&(this.__impl=Injector.getInject(this.KEY)),null==this.__impl)throw new Error(this.KEY+"未注入！");return this.__impl}}AudioManager.KEY="AudioManager",AudioManager.MAX_SOUND_CHANNEL_COUNT=30;class Injector{static inject(t,e){e instanceof Function?this.__injectedMap.set(t,e):this.__instanceMap.set(t,e)}static getInject(t){let e=this.__instanceMap.get(t);if(e)return e;let s=this.__injectedMap.get(t);return void 0===s?null:(e=new s,this.__instanceMap.set(t,e),e)}}Injector.__injectedMap=new Map,Injector.__instanceMap=new Map;class Timer{static get currentTime(){return this.impl.currentTime}static get absTime(){return this.impl.absTime}static reset(){this.impl.reset()}static get impl(){if(null==this.__impl&&(this.__impl=Injector.getInject(this.KEY)),null==this.__impl)throw new Error("未注入："+this.KEY);return this.__impl}}Timer.KEY="Timer";class TickManager{static addTicker(t){this.impl.addTicker(t)}static removeTicker(t){this.impl.removeTicker(t)}static callNextFrame(t,e){this.impl.callNextFrame(t,e)}static clearNextFrame(t,e){this.impl.clearNextFrame(t,e)}static get impl(){if(null==this.__impl&&(this.__impl=Injector.getInject(this.KEY)),null==this.__impl)throw new Error(this.KEY+" 未注入!");return this.__impl}}TickManager.KEY="TickManager";class EventDispatcher{constructor(){this.callerMap=new Map,this.keyMap=new Map}on(t,e,s,i=0){let n,r;if(this.keyMap.has(t)){n=this.keyMap.get(t);for(const i of n)if(i.target==s&&i.handler==e)return void console.error("重复添加同一个事件监听："+t+" "+s+" "+e)}else n=[],this.keyMap.set(t,n);if(r=new EventInfo(t,s,e),n.push(r),n.sort((t,e)=>t.priority-i),this.callerMap.has(s)){n=this.callerMap.get(s);for(const i of n)i.key==t&&i.handler==e&&console.error("事件系统 处理器关联错误："+t+" "+s+" "+e)}else n=[],this.callerMap.set(s,n);n.push(r)}off(t,e,s){if(0==this.keyMap.has(t))return;let i,n=this.keyMap.get(t),r=null;for(let t=0;t<n.length;t++)if(i=n[t],i.target==s&&i.handler==e){r=i,n.splice(t,1);break}if(this.callerMap.has(s)){n=this.callerMap.get(s);for(let s=0;s<n.length;s++)if(i=n[s],i.key==t&&i.handler==e){r=i,n.splice(s,1);break}}r&&r.destroy()}offByCaller(t){let e,s=this.callerMap.get(t);if(void 0!==s&&0!=s.length){for(;s.length;)e=s[0],this.off(e.key,e.handler,e.target);this.callerMap.delete(t)}}offAllEvent(){this.keyMap.forEach(t=>{t.forEach(t=>{t.destroy()})}),this.keyMap.clear(),this.callerMap.clear()}emit(t,e){if(0==this.keyMap.has(t))return;let s,i=this.keyMap.get(t);for(let n=0;n<i.length;n++)s=i[n],s.handler.apply(s.target,[t,this,e])}hasEvent(t){return this.keyMap.has(t)}hasEventHandler(t,e,s){if(0==this.keyMap.has(t))return!1;let i,n=this.keyMap.get(t);for(let t=0;t<n.length;t++)if(i=n[t],i.target==s&&i.handler==e)return!0;return!1}destroy(){this.callerMap.clear(),this.keyMap.clear()}}class EventInfo{constructor(t,e,s){this.key="",this.priority=255,this.key=t,this.target=e,this.handler=s}destroy(){}}class Event{static getChannel(t="main"){return this.channels.get(t)}static emit(t,e,s="main"){if(!this.channels.has(s))return;this.channels.get(s).emit(t,e)}static on(t,e,s,i=0,n="main"){let r;this.channels.has(n)?r=this.channels.get(n):(r=new EventDispatcher,this.channels.set(n,r)),r.on(t,e,s,i)}static off(t,e,s,i="main"){let n;this.channels.has(i)&&(n=this.channels.get(i),n.off(t,e,s))}static offByCaller(t,e="main"){let s;this.channels.has(e)&&(s=this.channels.get(e),s.offByCaller(t))}static offAll(t="main"){let e;this.channels.has(t)&&(e=this.channels.get(t),e.offAllEvent())}}Event.START="start",Event.PROGRESS="progress",Event.COMPLETE="complete",Event.ERROR="Error",Event.ADD="add",Event.REMOVE="remove",Event.UPDATE="update",Event.CLEAR="clear",Event.State_Changed="stateChanged",Event.channels=new Map;class List extends EventDispatcher{constructor(t=!0){super(),this.__only=!1,this.count=0,this.__only=t,this.__element=[]}push(t){if(this.__only){if(this.__element.indexOf(t)>=0)return!1}return this.__element.push(t),this.count=this.__element.length,this.hasEvent(Event.ADD)&&this.emit(Event.ADD,t),!0}unshift(t){if(this.__only){if(this.__element.indexOf(t)>=0)return!1}return this.__element.unshift(t),this.count=this.__element.length,this.hasEvent(Event.ADD)&&this.emit(Event.ADD,t),!0}pop(){if(this.__element.length>0){const t=this.__element.pop();return this.count=this.__element.length,this.hasEvent(Event.REMOVE)&&this.emit(Event.REMOVE,t),t}return null}shift(){if(this.__element.length>0){const t=this.__element.shift();return this.count=this.__element.length,this.hasEvent(Event.REMOVE)&&this.emit(Event.REMOVE,t),t}return null}removeAt(t){if(t>=this.__element.length)throw new Error("删除索引超出范围！");const e=this.__element[t];return this.__element.splice(t,1),this.count=this.__element.length,this.hasEvent(Event.REMOVE)&&this.emit(Event.REMOVE,e),e}remove(t){let e=this.__element.indexOf(t);if(e<0)throw new Error("要删除的内容不在列表中！"+t);const s=this.__element[e];this.__element.splice(e,1),this.count=this.__element.length,this.hasEvent(Event.REMOVE)&&this.emit(Event.REMOVE,s)}clear(){this.count=0,this.__element.length=0,this.hasEvent(Event.CLEAR)&&this.emit(Event.CLEAR)}has(t){return this.find(t)>=0}find(t){return this.__element.indexOf(t)}findIndex(t){return this.__element.findIndex(t)}get(t){if(t>=this.__element.length)throw new Error("超出索引范围:"+t+"/"+this.__element.length);return this.__element[t]}get elements(){return this.__element}}class Dictionary extends EventDispatcher{constructor(){super(),this.__map=new Map,this.__list=[]}set(t,e){let s;if(this.__map.has(t)){s=this.__map.get(t);const e=this.__list.indexOf(s);if(e<0)throw new Error("Dictionary内部逻辑错误！");this.__map.delete(t),this.__list.splice(e,1),this.emit(Event.REMOVE,s)}this.__map.set(t,e),this.__list.push(e),this.emit(Event.ADD,e)}has(t){return this.__map.has(t)}get(t){return this.__map.get(t)}getValue(t){if(t>=this.__list.length)throw new Error(t+"索引超出0-"+this.__list.length+"范围");return this.__list[t]}delete(t){if(!this.__map.has(t))return;const e=this.__map.get(t),s=this.__list.indexOf(e);if(s<0)throw new Error("Dictionary内部逻辑错误！");return this.__list.splice(s,1),this.__map.delete(t),this.hasEvent(Event.REMOVE)&&this.emit(Event.REMOVE,e),e}clear(){this.__map.clear(),this.__list.length=0}get elements(){return this.__list}get size(){return this.__map.size}destroy(){super.destroy(),this.__map.clear(),this.__map=null,this.__list=null}}class ResManager{static addRes(t){this.impl.addRes(t)}static hasRes(t){return this.impl.hasRes(t)}static addResRef(t,e){return this.impl.addResRef(t,e)}static removeResRef(t){return this.impl.removeResRef(t)}static gc(t){return this.impl.gc(t)}static resList(){return this.impl.resList}static get impl(){if(null==this.__impl&&(this.__impl=Injector.getInject(this.KEY)),null==this.__impl)throw new Error("未注入："+this.KEY);return this.__impl}}function resURL2Key(t){return ResURLUtils.resURL2Key(t)}ResManager.KEY="ResManager",ResManager.GC_TIME=15,ResManager.AUTO_GC=!0;class ResURLUtils{static getAssetType(t){if(!this.__assetTypes.has(t))throw new Error("未找到对应资源类型："+t);return this.__assetTypes.get(t)}static key2ResURL(t){if(t.indexOf("|")){let e=t.split("|");return{url:e[0],bundle:e[1],type:this.getAssetType(e[2])}}return t}static resURL2Key(t){return null==t||null==t?"":"string"==typeof t?t:t.url+"|"+t.bundle+"|"+this.getClassName(t.type)}static getClassName(t){let e;e="string"!=typeof t?t.toString():t,e=e.replace("function ","");let s=e.indexOf("()");if(s<0)throw new Error("获取类型名称错误："+e);return e=e.substring(0,s),this.__assetTypes.has(e)||this.__assetTypes.set(e,t),e}}ResURLUtils.__assetTypes=new Map;var __awaiter=function(t,e,s,i){return new(s||(s=Promise))((function(n,r){function a(t){try{l(i.next(t))}catch(t){r(t)}}function h(t){try{l(i.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,h)}l((i=i.apply(t,e||[])).next())}))};class Res{static setResLoader(t,e){this.__loaders.set(t,e)}static getResLoader(t){if(!this.__loaders.has(t))throw new Error("未注册的加载器："+t);return this.__loaders.get(t)}static getResRef(t,e,s){return __awaiter(this,void 0,void 0,(function*(){if(!this.resourcePool)throw new Error("资源对象池未设置！");if(Array.isArray(t)){let i=[],n=0;for(let r=0;r<t.length;r++){const a=t[r],h=yield this.loadAsset(a,e,e=>{s&&s((n+e)/t.length)});i.push(h)}return yield Promise.all(i)}{let i=resURL2Key(t);return ResManager.hasRes(i)?Promise.resolve(ResManager.addResRef(i,e)):yield this.loadAsset(t,e,t=>{s&&s(t)})}}))}static loadAsset(t,e,s){return __awaiter(this,void 0,void 0,(function*(){const i=resURL2Key(t);if(ResManager.hasRes(i))return Promise.resolve(ResManager.addResRef(i,e));return new Promise((n,r)=>{if("string"==typeof t)throw new Error("未实现！");let a,h=cc.assetManager.getBundle(t.bundle);h?(a="function"==typeof t.type?this.defaultAssetLoader:this.getResLoader(t.type),a(t,h,s,(t,s)=>{if(t)return void r(t);let a=this.resourcePool.allocate();a.key=i,a.content=s,ResManager.addRes(a),n(ResManager.addResRef(i,e))})):cc.assetManager.loadBundle(t.bundle,(h,l)=>{h?r(h):(a="function"==typeof t.type?this.defaultAssetLoader:this.getResLoader(t.type),a(t,l,s,(t,s)=>{if(t)return void r(t);let a=this.resourcePool.allocate();a.key=i,a.content=s,ResManager.addRes(a),n(ResManager.addResRef(i,e))}))})})}))}static defaultAssetLoader(t,e,s,i){if("string"==typeof t)throw new Error("url不能为字符串"+t);if("string"==typeof t.type)throw new Error("url.type不能为字符串"+t);e.load(t.url,t.type,s,i)}}Res.__loaders=new Map;class ResRef{constructor(){this.key="",this.__isDispose=!1}dispose(){if(this.__isDispose)throw new Error("重复释放资源引用");this.__isDispose=!0}get isDispose(){return this.__isDispose}reset(){this.key="",this.refKey=void 0,this.content=null,this.__isDispose=!1}destroy(){this.key="",this.refKey=void 0,this.content=null}}class TaskQueue extends EventDispatcher{constructor(){super(),this.__index=0,this.__taskList=[]}addTask(t){if(this.__taskList.indexOf(t)>=0)throw new Error("重复添加！");this.__taskList.push(t)}removeTask(t){let e=this.__taskList.indexOf(t);if(e<0)throw new Error("未找到要删除的内容！");this.__taskList.splice(e,1)}start(t){this.__index=0,this.__tryNext()}__tryNext(){if(this.__index<this.__taskList.length){let t=this.__taskList[this.__index];t.on(Event.COMPLETE,this.__subTaskEventHandler,this),t.on(Event.PROGRESS,this.__subTaskEventHandler,this),t.on(Event.ERROR,this.__subTaskEventHandler,this),t.start()}else this.emit(Event.COMPLETE)}__subTaskEventHandler(t,e,s){if(t!=Event.PROGRESS)e.offAllEvent(),t!=Event.ERROR?(e.destroy(),this.__index++,this.__tryNext()):this.emit(Event.ERROR,s);else{let t=null==Number(s)?0:Number(s),e=(this.__index+t)/this.__taskList.length;this.emit(Event.PROGRESS,e)}}destroy(){super.destroy(),this.__taskList.length=0,this.__index=0}}class TaskSequence extends EventDispatcher{constructor(){super(),this.__taskList=new Array,this.__index=0}addTask(t){if(this.__taskList.indexOf(t)>=0)throw new Error("重复添加！");this.__taskList.push(t)}removeTask(t){let e=this.__taskList.indexOf(t);if(e<0)throw new Error("找不到要删除的内容!");this.__taskList.splice(e,1)}start(t){for(let t=0;t<this.__taskList.length;t++){const e=this.__taskList[t];e.on(Event.COMPLETE,this.__subTaskEventHandler,this),e.on(Event.ERROR,this.__subTaskEventHandler,this),e.on(Event.PROGRESS,this.__subTaskEventHandler,this),e.start()}}__subTaskEventHandler(t,e,s){t!=Event.PROGRESS?(e.offAllEvent(),t!=Event.ERROR?(this.__index++,this.__index<this.__taskList.length||(e.destroy(),this.emit(Event.COMPLETE))):this.emit(Event.ERROR,s)):this.emit(Event.PROGRESS,this.__index/this.__taskList.length)}destroy(){super.destroy(),this.__taskList.length=0,this.__index=0}}class Debuger{static debug(t,e){this.__debuger.set(t,e)}static getLogs(t){return null!=t&&null!=t||(t="all"),this.__logs.has(t)?this.__logs.get(t):null}static __save(t,e,s){let i;this.__logs.has(t)?i=this.__logs.get(t):(i=[],this.__logs.set(t,i));let n="["+t+"]"+e+":"+s;return i.length>=this.MaxCount&&i.unshift(),i.push(n),this.__logs.has("all")?i=this.__logs.get("all"):(i=[],this.__logs.set("all",i)),i.length>=this.MaxCount&&i.unshift(),i.push(n),n}static log(t,e){let s=this.__save(t,"Log",e),i=!!this.__debuger.has("all")&&this.__debuger.get("all"),n=!!this.__debuger.has(t)&&this.__debuger.get(t);(i||n)&&console.log(s)}static err(t,e){let s=this.__save(t,"Error",e),i=!!this.__debuger.has("all")&&this.__debuger.get("all"),n=!!this.__debuger.has(t)&&this.__debuger.get(t);(i||n)&&console.error(s)}static warn(t,e){let s=this.__save(t,"Warn",e),i=!!this.__debuger.has("all")&&this.__debuger.get("all"),n=!!this.__debuger.has(t)&&this.__debuger.get(t);(i||n)&&console.warn(s)}static info(t,e){let s=this.__save(t,"Info",e),i=!!this.__debuger.has("all")&&this.__debuger.get("all"),n=!!this.__debuger.has(t)&&this.__debuger.get(t);(i||n)&&console.info(s)}}Debuger.MaxCount=Number.MAX_SAFE_INTEGER,Debuger.__logs=new Dictionary,Debuger.__debuger=new Map,exports.AudioManager=AudioManager,exports.Debuger=Debuger,exports.Dictionary=Dictionary,exports.Injector=Injector,exports.List=List,exports.Res=Res,exports.ResRef=ResRef,exports.TaskQueue=TaskQueue,exports.TaskSequence=TaskSequence,exports.TickManager=TickManager,exports.Timer=Timer;