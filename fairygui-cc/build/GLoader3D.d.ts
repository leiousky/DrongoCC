import { sp, dragonBones, Color, Vec2 } from "cc";
import { AlignType, LoaderFillType, VertAlignType } from "./FieldTypes";
import { GObject } from "./GObject";
import { ByteBuffer } from "./utils/ByteBuffer";
export declare class GLoader3D extends GObject {
    private _url;
    private _align;
    private _verticalAlign;
    private _autoSize;
    private _fill;
    private _shrinkOnly;
    private _playing;
    private _frame;
    private _loop;
    private _animationName;
    private _skinName;
    private _color;
    private _contentItem;
    private _container;
    private _content;
    private _updatingLayout;
    constructor();
    dispose(): void;
    get url(): string | null;
    set url(value: string | null);
    get icon(): string | null;
    set icon(value: string | null);
    get align(): AlignType;
    set align(value: AlignType);
    get verticalAlign(): VertAlignType;
    set verticalAlign(value: VertAlignType);
    get fill(): LoaderFillType;
    set fill(value: LoaderFillType);
    get shrinkOnly(): boolean;
    set shrinkOnly(value: boolean);
    get autoSize(): boolean;
    set autoSize(value: boolean);
    get playing(): boolean;
    set playing(value: boolean);
    get frame(): number;
    set frame(value: number);
    get animationName(): string | null;
    set animationName(value: string | null);
    get skinName(): string | null;
    set skinName(value: string | null);
    get loop(): boolean;
    set loop(value: boolean);
    get color(): Color;
    set color(value: Color);
    get content(): sp.Skeleton | dragonBones.ArmatureDisplay;
    protected loadContent(): void;
    protected loadFromPackage(itemURL: string): void;
    private onLoaded;
    setSpine(asset: sp.SkeletonData, anchor: Vec2, pma?: boolean): void;
    freeSpine(): void;
    setDragonBones(asset: dragonBones.DragonBonesAsset, atlasAsset: dragonBones.DragonBonesAtlasAsset, anchor: Vec2, pma?: boolean): void;
    freeDragonBones(): void;
    private onChange;
    private onChangeSpine;
    private onChangeDragonBones;
    protected loadExternal(): void;
    private onLoaded2;
    private updateLayout;
    private clearContent;
    protected handleSizeChanged(): void;
    protected handleAnchorChanged(): void;
    protected handleGrayedChanged(): void;
    getProp(index: number): any;
    setProp(index: number, value: any): void;
    setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
}
